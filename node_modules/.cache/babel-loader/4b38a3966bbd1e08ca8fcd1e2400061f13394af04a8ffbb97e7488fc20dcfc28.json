{"ast":null,"code":"import React from'react';// import logo from './logo.svg';\n// import './App.css';\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.tsx</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\nimport{useEffect,useState}from'react';import'./App.css';import{buildGame,LoadGameData,splitTeamNames,nbaTeamsAbbreviation,generateYouTubeLinks}from'./api';import{Card,CardContent,Typography,Chip,Box,Stack}from'@mui/material';import{makeStyles}from'@mui/styles';import{youtubeData}from'./YoutubeData';import Header from'./Header';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const useStyles=makeStyles(theme=>({card:{marginBottom:16,padding:'16px'},chip:{marginTop:8},chipContainer:{display:'flex',flexWrap:'wrap',justifyContent:'center',alignItems:'center',gap:'8px'// Add spacing between chips\n},link:{display:'flex',// Ensure the link aligns properly\nalignItems:'center',// Vertically center the link content\ntextDecoration:'none'// Remove underline from the link\n}}));// function serializeMap(map: Map<string, any>): string {\n//   return JSON.stringify(Array.from(map.entries()));\n// }\n// function deserializeMap(serializedMap: string): Map<string, any> {\n//   return new Map(JSON.parse(serializedMap));\n// }\n// function loadMapFromFile(filePath: string): Map<string, any> {\n//   const serializedMap = fs.readFileSync(filePath, 'utf-8');\n//   return deserializeMap(serializedMap);\n// }\n// Function to save data as a file in the browser\n// const saveMapToFile = (data: Map<string, number[]>, fileName: string) => {\n//   const jsonString = JSON.stringify(Array.from(data.entries()));\n//   const blob = new Blob([jsonString], { type: 'application/json' });\n//   const url = URL.createObjectURL(blob);\n//   const link = document.createElement('a');\n//   link.href = url;\n//   link.download = fileName;\n//   link.click();\n//   URL.revokeObjectURL(url);\n// };\nfunction App(){// LoadGameData();\nconst classes=useStyles();// const gamesData = await LoadGameData();\nconst[gamesData,setGamesData]=useState(null);const[closeGameStatuses,setCloseGameStatuses]=useState([]);const[loading,setLoading]=useState(true);const[youtubeLinks,setYoutubeLinks]=useState(null);const[selectedDate,setSelectedDate]=useState(null);// const [revealScore, setRevealScore] = useState<boolean>(false);\nuseEffect(()=>{const fetchData=async()=>{try{// Simulate an API call or async operation\nconst data=await LoadGameData();// Replace with your actual data fetching logic\nconst gamesArray=data.response||[];// const results = isCloseGame(builtGames);\nconst{builtGames,closeGameStatuses}=buildGame(gamesArray);//+\n// const builtGames: Map<string, number[]>, closeGameStatusestatusArr: boolean[] = buildGame(gamesArray);\nsetGamesData(builtGames);console.log(\"builtGAmes are \"+builtGames);console.log(builtGames);setCloseGameStatuses(closeGameStatuses);console.log(\"closeGameStatuses are \"+closeGameStatuses);const youtubeLinks=generateYouTubeLinks(youtubeData,Array.from(builtGames.keys()));setYoutubeLinks(youtubeLinks);console.log(\"youtubeLinks are \"+youtubeLinks);console.log(youtubeLinks);// Save the data to a file\n// const filePath = '03-04-NBAGames.json';\n// saveMapToFile(builtGames, filePath);\n// console.log('Finished saving file');\n}catch(error){console.error('Error fetching data:',error);}finally{setLoading(false);}};fetchData();},[]);if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}if(!gamesData){return/*#__PURE__*/_jsx(\"div\",{children:\"No data available\"});}// async function handleChange(event: SelectChangeEvent<any>, child: ReactNode): Promise<void> {\n//   const date = event.target.value;\n//   const nbaData = await LoadGameData(date);\n//   setSelectedDate(date);\n//   setGamesData(nbaData);\n//   const gamesArray = nbaData.response || [];\n//   // const results = isCloseGame(builtGames);\n//   const builtGames = buildGame(gamesArray);\n//   setGamesData(builtGames);\n//   const youtubeLinks = generateYouTubeLinks(youtubeData, Array.from(builtGames.keys()) as string[]);\n//   setYoutubeLinks(youtubeLinks);\n// }\nconst handleDateChange=async date=>{const nbaData=await LoadGameData(date);console.log(\"inside handleDateChange\");console.log(\"nbaData is \"+nbaData);console.log(nbaData);const gamesArray=nbaData.response||[];const{builtGames,closeGameStatuses}=buildGame(gamesArray);//+\nconsole.log(\"builtGames are \"+builtGames);console.log(builtGames);setGamesData(builtGames);setCloseGameStatuses(closeGameStatuses);const youtubeLinks=generateYouTubeLinks(youtubeData,Array.from(builtGames.keys()));setYoutubeLinks(youtubeLinks);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{onDateChange:handleDateChange}),Array.from(gamesData.entries()).map((_ref,i)=>{let[gameKey,scores]=_ref;const teamNames=splitTeamNames(gameKey);if(!teamNames)return null;const{visitorTeam,homeTeam}=teamNames;const[visitorScore,homeScore]=scores;const homeAbbreviation=nbaTeamsAbbreviation.get(homeTeam)||homeTeam;const visitorAbbreviation=nbaTeamsAbbreviation.get(visitorTeam)||visitorTeam;const currLink=(youtubeLinks===null||youtubeLinks===void 0?void 0:youtubeLinks.get(gameKey))||'';return/*#__PURE__*/_jsx(Card,{className:classes.card,children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",gutterBottom:true,children:[homeTeam,\" vs \",visitorTeam]}),!closeGameStatuses[i]&&/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",children:[homeAbbreviation,\" \",homeScore,\" - \",visitorAbbreviation,\" \",visitorScore]}),!closeGameStatuses[i]&&currLink&&/*#__PURE__*/_jsx(\"a\",{href:currLink,target:\"_blank\",rel:\"noopener noreferrer\",style:{textDecoration:'none'},children:/*#__PURE__*/_jsx(Chip,{label:\"Not a Close Game, But Watch Highlights Anyway!\",color:\"error\",className:classes.chip})}),closeGameStatuses[i]&&/*#__PURE__*/_jsx(Box,{className:classes.chipContainer,children:/*#__PURE__*/_jsxs(Stack,{direction:\"row\",spacing:1,alignItems:\"center\",children:[/*#__PURE__*/_jsx(Chip,{label:\"Close Game\",color:\"success\",className:classes.chip}),currLink&&/*#__PURE__*/_jsx(\"a\",{href:currLink,target:\"_blank\",rel:\"noopener noreferrer\",className:classes.link,children:/*#__PURE__*/_jsx(Chip,{label:\"Watch Highlights!\",color:\"primary\",className:classes.chip,clickable:true// Make the chip clickable\n})})]})})]})},`${homeTeam}-${visitorTeam}`);})]});};export default App;","map":{"version":3,"names":["React","useEffect","useState","buildGame","LoadGameData","splitTeamNames","nbaTeamsAbbreviation","generateYouTubeLinks","Card","CardContent","Typography","Chip","Box","Stack","makeStyles","youtubeData","Header","jsx","_jsx","jsxs","_jsxs","useStyles","theme","card","marginBottom","padding","chip","marginTop","chipContainer","display","flexWrap","justifyContent","alignItems","gap","link","textDecoration","App","classes","gamesData","setGamesData","closeGameStatuses","setCloseGameStatuses","loading","setLoading","youtubeLinks","setYoutubeLinks","selectedDate","setSelectedDate","fetchData","data","gamesArray","response","builtGames","console","log","Array","from","keys","error","children","handleDateChange","date","nbaData","onDateChange","entries","map","_ref","i","gameKey","scores","teamNames","visitorTeam","homeTeam","visitorScore","homeScore","homeAbbreviation","get","visitorAbbreviation","currLink","className","variant","gutterBottom","href","target","rel","style","label","color","direction","spacing","clickable"],"sources":["/Users/alfredosantana/Desktop/workspace/react-app/close-game/src/App.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.tsx</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport { useEffect, useState } from 'react'\nimport './App.css'\nimport { buildGame, LoadGameData, splitTeamNames, nbaTeamsAbbreviation, generateYouTubeLinks, isCloseGame } from './api';\nimport { Card, CardContent, Typography, Chip, FormControl, InputLabel, MenuItem, Select, Box, SelectChangeEvent, Stack } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { youtubeData } from './YoutubeData';\nimport Header from './Header';\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    marginBottom: 16,\n    padding: '16px',\n  },\n  chip: {\n    marginTop: 8,\n  },\n  chipContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '8px', // Add spacing between chips\n  },\n  link: {\n    display: 'flex', // Ensure the link aligns properly\n    alignItems: 'center', // Vertically center the link content\n    textDecoration: 'none', // Remove underline from the link\n  },\n\n}));\n\n\n\n// function serializeMap(map: Map<string, any>): string {\n//   return JSON.stringify(Array.from(map.entries()));\n// }\n\n\n\n// function deserializeMap(serializedMap: string): Map<string, any> {\n//   return new Map(JSON.parse(serializedMap));\n// }\n\n// function loadMapFromFile(filePath: string): Map<string, any> {\n//   const serializedMap = fs.readFileSync(filePath, 'utf-8');\n//   return deserializeMap(serializedMap);\n// }\n\n// Function to save data as a file in the browser\n// const saveMapToFile = (data: Map<string, number[]>, fileName: string) => {\n//   const jsonString = JSON.stringify(Array.from(data.entries()));\n//   const blob = new Blob([jsonString], { type: 'application/json' });\n//   const url = URL.createObjectURL(blob);\n//   const link = document.createElement('a');\n//   link.href = url;\n//   link.download = fileName;\n//   link.click();\n//   URL.revokeObjectURL(url);\n// };\n\nfunction App() {\n  // LoadGameData();\n  const classes = useStyles();\n\n  // const gamesData = await LoadGameData();\n  const [gamesData, setGamesData] = useState<Map<string, number[]> | null>(null);\n  const [closeGameStatuses, setCloseGameStatuses] = useState<boolean[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [youtubeLinks, setYoutubeLinks] = useState<Map<string, string> | null>(null);\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  // const [revealScore, setRevealScore] = useState<boolean>(false);\n\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Simulate an API call or async operation\n        const data = await LoadGameData(); // Replace with your actual data fetching logic\n        const gamesArray = data.response || [];\n        // const results = isCloseGame(builtGames);\n        const { builtGames, closeGameStatuses } = buildGame(gamesArray);//+\n\n        // const builtGames: Map<string, number[]>, closeGameStatusestatusArr: boolean[] = buildGame(gamesArray);\n        setGamesData(builtGames);\n        console.log(\"builtGAmes are \" + builtGames);\n        console.log(builtGames);\n        setCloseGameStatuses(closeGameStatuses);\n        console.log(\"closeGameStatuses are \" + closeGameStatuses);\n\n\n\n        const youtubeLinks = generateYouTubeLinks(youtubeData, Array.from(builtGames.keys()) as string[]);\n        setYoutubeLinks(youtubeLinks);\n        console.log(\"youtubeLinks are \" + youtubeLinks);\n        console.log(youtubeLinks);\n\n\n        // Save the data to a file\n        // const filePath = '03-04-NBAGames.json';\n        // saveMapToFile(builtGames, filePath);\n        // console.log('Finished saving file');\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!gamesData) {\n    return <div>No data available</div>;\n  }\n\n  // async function handleChange(event: SelectChangeEvent<any>, child: ReactNode): Promise<void> {\n  //   const date = event.target.value;\n  //   const nbaData = await LoadGameData(date);\n  //   setSelectedDate(date);\n  //   setGamesData(nbaData);\n  //   const gamesArray = nbaData.response || [];\n  //   // const results = isCloseGame(builtGames);\n  //   const builtGames = buildGame(gamesArray);\n  //   setGamesData(builtGames);\n  //   const youtubeLinks = generateYouTubeLinks(youtubeData, Array.from(builtGames.keys()) as string[]);\n  //   setYoutubeLinks(youtubeLinks);\n  // }\n\n  const handleDateChange = async (date: string) => {\n    const nbaData = await LoadGameData(date);\n    console.log(\"inside handleDateChange\");\n    console.log(\"nbaData is \" + nbaData);\n    console.log(nbaData);\n    const gamesArray = nbaData.response || [];\n    const { builtGames, closeGameStatuses } = buildGame(gamesArray);//+\n    console.log(\"builtGames are \" + builtGames);\n    console.log(builtGames);\n    setGamesData(builtGames);\n    setCloseGameStatuses(closeGameStatuses);\n\n    const youtubeLinks = generateYouTubeLinks(youtubeData, Array.from(builtGames.keys()));\n    setYoutubeLinks(youtubeLinks);\n  };\n\n  return (\n\n    <div>\n         <Header onDateChange={handleDateChange} />\n\n      {/* <Box sx={{ minWidth: 120 }}>\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">Date</InputLabel>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={selectedDate}\n            label=\"Date\"\n            onChange={(event) => handleChange(event, child)}}\n          >\n            <MenuItem value={\"March 5, 2025\"}>March 5, 2025</MenuItem>\n            <MenuItem value={\"March 6, 2025\"}>March 6, 2025</MenuItem>\n            <MenuItem value={\"March 7, 2025\"}>March 7, 2025</MenuItem>\n          </Select>\n        </FormControl>\n      </Box> */}\n      {Array.from(gamesData.entries()).map(([gameKey, scores]: [string, number[]], i: number) => {\n        const teamNames = splitTeamNames(gameKey);\n        if (!teamNames) return null;\n\n        const { visitorTeam, homeTeam } = teamNames;\n        const [visitorScore, homeScore] = scores;\n\n        const homeAbbreviation = nbaTeamsAbbreviation.get(homeTeam) || homeTeam;\n        const visitorAbbreviation = nbaTeamsAbbreviation.get(visitorTeam) || visitorTeam;\n        const currLink = youtubeLinks?.get(gameKey) || '';\n        return (\n          <Card className={classes.card} key={`${homeTeam}-${visitorTeam}`}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                {homeTeam} vs {visitorTeam}\n              </Typography>\n              {!closeGameStatuses[i] && <Typography variant=\"body1\">\n                {homeAbbreviation} {homeScore} - {visitorAbbreviation} {visitorScore}\n              </Typography>}\n              {!closeGameStatuses[i] && currLink && (\n                <a href={currLink} target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: 'none' }}>\n                  <Chip\n                    label=\"Not a Close Game, But Watch Highlights Anyway!\"\n                    color=\"error\"\n                    className={classes.chip}\n                  />\n                </a>\n              )}\n              {closeGameStatuses[i] && (\n                <Box className={classes.chipContainer}>\n\n                  <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                    {/* Chip to indicate the game is close */}\n                    <Chip\n                      label=\"Close Game\"\n                      color=\"success\"\n                      className={classes.chip}\n                    />\n\n                    {/* Chip to watch highlights (only shown if a link is available) */}\n                    {currLink && (\n                      <a href={currLink} target=\"_blank\" rel=\"noopener noreferrer\" className={classes.link}>\n                        <Chip\n                          label=\"Watch Highlights!\"\n                          color=\"primary\"\n                          className={classes.chip}\n                          clickable // Make the chip clickable\n                        />\n                      </a>\n                    )}\n                  </Stack>\n                </Box>\n\n              )}\n              {/* {closeGameStatuses[i] && (\n                <a href={currLink} target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: 'none' }}>\n                  <Chip\n                    label=\"Close Game - Watch Highlights!\"\n                    color=\"success\"\n                    className={classes.chip}\n                  />\n                </a>\n              )} */}\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}