{"ast":null,"code":"import axios from 'axios';\nimport { format, toZonedTime } from 'date-fns-tz';\nimport { addDays } from 'date-fns';\n\n// const PATH = \"/Users/alfredosantana/desktop/closegame/closegame/src/main/java/todaysGames/gamesData.txt\";\n\n// const scopes = \"youtube.googleapis.com\";\n// The Calendar entry to create\n//  var resource = {\n//     \"summary\": \"Appointment\",\n//     \"location\": \"Somewhere\",\n//     \"start\": {\n//       \"dateTime\": \"2011-12-16T10:00:00.000-07:00\"\n//     },\n//     \"end\": {\n//       \"dateTime\": \"2011-12-16T10:25:00.000-07:00\"\n//     }\n//   };\n\n/**\n* This function searches for videos related to the keyword 'dogs'. The video IDs and titles\n* of the search results are logged to Apps Script's log.\n*\n* Note that this sample limits the results to 25. To return more results, pass\n* additional parameters as documented here:\n*   https://developers.google.com/youtube/v3/docs/search/list\n*/\n// function searchByKeyword() {\n//     var results = YouTube.Search.list('id,snippet', {q: 'dogs', maxResults: 25});\n//     for(var i in results.items) {\n//       var item = results.items[i];\n//       Logger.log('[%s] Title: %s', item.id.videoId, item.snippet.title);\n//     }\n//   }\n\n// async function handleClientLoad() {\n//   gapi.load('client'a, initClient);\n// }\n\n// function signIn() {\n//   gapi.auth2.getAuthInstance().signIn();\n// }\n\n// function makeRequest() {\n//   gapi.client.request({\n//     'path': '/calendar/v3/calendars/primary/events',\n//     'method': 'POST',\n//     'body': resource\n//   }).then(function(resp) {\n//       console.log(resp);\n//       console.log(resp.result);\n//   //   writeResponse(resp.result);\n//   });\n// }\n\n// function getTodayDateFormatted(): string {\n//     const today = new Date();\n\n//     // Get year, month, and day\n//     const year = today.getFullYear();\n//     const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are zero-based\n//     const day = String(today.getDate()).padStart(2, '0');\n\n//     // Format as \"YYYY-MM-DD\"\n//     return `${year}-${month}-${day}`;\n//   }\n\n//   function getTodaysDateInEST(): string {\n//     const now = new Date(); // Current UTC time\n//     console.log(\"now is \" + now.toDateString);\n//     const estTime = toZonedTime(now, 'America/New_York'); // Convert to EST\n//     console.log(\"estTime is \" + estTime.toDateString);\n//     // Format the date as \"YYYY-MM-DD\" in EST\n//     return format(estTime, 'yyyy-MM-dd');\n//   }\n\nfunction getNextDaysDateInPST() {\n  const now = new Date(); // Current UTC time\n  const pstTime = toZonedTime(now, 'America/Los_Angeles'); // Convert to PST\n  const nextDay = addDays(pstTime, 1); // Add 1 day to the current PST date\n\n  // Format the date as \"YYYY-MM-DD\" in PST\n  return format(nextDay, 'yyyy-MM-dd');\n}\nfunction generateHighlightName(team1, team2) {\n  // Get the current date\n  const currentDate = new Date();\n\n  // Format the date as \"Month Day, Year\"\n  const formattedDate = currentDate.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  // Generate the highlight name\n  const highlightName = `${team1.toUpperCase()} at ${team2.toUpperCase()} | FULL GAME HIGHLIGHTS | ${formattedDate}`;\n  return highlightName;\n}\n\n// Example usage:\nconst team1 = \"Warriors\";\nconst team2 = \"Nets\";\nconst highlightName = generateHighlightName(team1, team2);\nconsole.log(highlightName); // Output: WARRIORS at NETS | FULL GAME HIGHLIGHTS | March 6, 2025\n\n// function handleClientLoad() {\n//   // Load the API client and auth2 library\n//   gapi.load('client:auth2', initClient);\n// }\n\n// function initClient() {\n//   gapi.client.init({\n//       apiKey: YOUTUBE_API_KEY,\n//       // discoveryDocs: discoveryDocs,\n//       clientId: GOOGLE_CLIENT_ID,\n//       scope: scopes\n//   }).then(function () {\n//     console.log('Client library loaded and initialized.');\n//     // Listen for sign-in state changes.\n//     // gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n//     // Handle the initial sign-in state.\n//     // updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n\n//     // authorizeButton.onclick = handleAuthClick;\n//     // signoutButton.onclick = handleSignoutClick;\n//   });\n// }\n\nexport function generateYouTubeLinks(jsonInput, teamMatchups) {\n  const linksMap = new Map();\n  console.log(\"Team matchups: \", teamMatchups);\n  console.log(\"JSON input: \", jsonInput);\n\n  // Map of abbreviated team names to full team names\n  const teamNameMap = {\n    \"WARRIORS\": \"Golden State Warriors\",\n    \"NETS\": \"Brooklyn Nets\",\n    \"PACERS\": \"Indiana Pacers\",\n    \"HAWKS\": \"Atlanta Hawks\",\n    \"CELTICS\": \"Boston Celtics\",\n    \"HORNETS\": \"Charlotte Hornets\",\n    \"BULLS\": \"Chicago Bulls\",\n    \"CAVALIERS\": \"Cleveland Cavaliers\",\n    \"MAVERICKS\": \"Dallas Mavericks\",\n    \"NUGGETS\": \"Denver Nuggets\",\n    \"PISTONS\": \"Detroit Pistons\",\n    \"ROCKETS\": \"Houston Rockets\",\n    \"CLIPPERS\": \"LA Clippers\",\n    \"LAKERS\": \"Los Angeles Lakers\",\n    \"GRIZZLIES\": \"Memphis Grizzlies\",\n    \"HEAT\": \"Miami Heat\",\n    \"BUCKS\": \"Milwaukee Bucks\",\n    \"TIMBERWOLVES\": \"Minnesota Timberwolves\",\n    \"PELICANS\": \"New Orleans Pelicans\",\n    \"KNICKS\": \"New York Knicks\",\n    \"THUNDER\": \"Oklahoma City Thunder\",\n    \"MAGIC\": \"Orlando Magic\",\n    \"76ERS\": \"Philadelphia 76ers\",\n    \"SUNS\": \"Phoenix Suns\",\n    \"TRAIL BLAZERS\": \"Portland Trail Blazers\",\n    \"KINGS\": \"Sacramento Kings\",\n    \"SPURS\": \"San Antonio Spurs\",\n    \"RAPTORS\": \"Toronto Raptors\",\n    \"JAZZ\": \"Utah Jazz\",\n    \"WIZARDS\": \"Washington Wizards\"\n  };\n  const partialTeamNameMap = {\n    // Eastern Conference\n    HAWKS: 'Atlanta Hawks',\n    CELTICS: 'Boston Celtics',\n    NETS: 'Brooklyn Nets',\n    HORNETS: 'Charlotte Hornets',\n    BULLS: 'Chicago Bulls',\n    CAVALIERS: 'Cleveland Cavaliers',\n    PISTONS: 'Detroit Pistons',\n    PACERS: 'Indiana Pacers',\n    HEAT: 'Miami Heat',\n    BUCKS: 'Milwaukee Bucks',\n    KNICKS: 'New York Knicks',\n    MAGIC: 'Orlando Magic',\n    '76ERS': 'Philadelphia 76ers',\n    // Note: Special characters like numbers are allowed\n    RAPTORS: 'Toronto Raptors',\n    WIZARDS: 'Washington Wizards',\n    // Western Conference\n    MAVERICKS: 'Dallas Mavericks',\n    NUGGETS: 'Denver Nuggets',\n    WARRIORS: 'Golden State Warriors',\n    ROCKETS: 'Houston Rockets',\n    CLIPPERS: 'LA Clippers',\n    LAKERS: 'Los Angeles Lakers',\n    GRIZZLIES: 'Memphis Grizzlies',\n    TIMBERWOLVES: 'Minnesota Timberwolves',\n    PELICANS: 'New Orleans Pelicans',\n    THUNDER: 'Oklahoma City Thunder',\n    SUNS: 'Phoenix Suns',\n    TRAILBLAZERS: 'Portland Trail Blazers',\n    // Note: \"Trailblazers\" is a common alternative spelling\n    BLAZERS: 'Portland Trail Blazers',\n    // Short form\n    KINGS: 'Sacramento Kings',\n    SPURS: 'San Antonio Spurs',\n    JAZZ: 'Utah Jazz'\n  };\n\n  // Get the current date in PST\n  const currentDate = new Date().toLocaleString('en-US', {\n    timeZone: 'America/Los_Angeles',\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  // Regex pattern to match \"highlights\" case-insensitively\n  const highlightsPattern = new RegExp('highlights', 'i');\n\n  // Map of team abbreviations to full team names\n  // const teamNameMap: { [key: string]: string } = {\n  //   GSW: 'Golden State Warriors',\n  //   BKN: 'Brooklyn Nets',\n  //   LAL: 'Los Angeles Lakers',\n  //   MEM: 'Memphis Grizzlies',\n  //   DAL: 'Dallas Mavericks',\n  //   // Add all other NBA teams here\n  // };\n\n  // Example team matchups (replace with your actual data)\n  // const teamMatchups = [\n  //   'Golden State Warriors - Brooklyn Nets',\n  //   'Los Angeles Lakers - Golden State Warriors',\n  //   'Memphis Grizzlies - Dallas Mavericks',\n  //   // Add all other matchups here\n  // ];\n\n  // Map to store the YouTube links for each matchup\n  // const linksMap = new Map<string, string>();\n\n  jsonInput.items.forEach(item => {\n    const title = item.snippet.title;\n    const videoId = item.id.videoId;\n\n    // Check if the title contains \"highlights\" (case-insensitive)\n    if (highlightsPattern.test(title)) {\n      // Regex to extract teams in \"TEAM1 at TEAM2\" format\n      const atRegex = /([A-Za-z\\s]+)\\s+at\\s+([A-Za-z\\s]+)/i;\n      // Regex to extract teams in \"TEAM1 vs TEAM2\" format\n      const vsRegex = /([A-Za-z\\s]+)\\s+vs\\.?\\s+([A-Za-z\\s]+)(?:\\s+-\\s+[A-Za-z\\s]+)?/i;\n      let team1;\n      let team2;\n\n      // First, try to match \"TEAM1 at TEAM2\"\n      const atMatch = title.match(atRegex);\n      if (atMatch) {\n        [, team1, team2] = atMatch;\n      } else {\n        // If \"at\" format not found, try \"TEAM1 vs TEAM2\"\n        const vsMatch = title.match(vsRegex);\n        if (vsMatch) {\n          [, team1, team2] = vsMatch;\n        }\n      }\n      if (team1 && team2) {\n        // Normalize team names (trim and convert to uppercase for abbreviation lookup)\n        const team1Normalized = team1.trim().toUpperCase();\n        const team2Normalized = team2.trim().toUpperCase();\n\n        // Function to resolve full team name using both maps\n        const resolveTeamName = team => {\n          // Check if the team is an abbreviation (e.g., \"GSW\")\n          if (teamNameMap[team]) {\n            return teamNameMap[team];\n          }\n          // Check if the team is a partial name (e.g., \"CLIPPERS\")\n          const partialMatch = Object.keys(partialTeamNameMap).find(key => team.includes(key));\n          if (partialMatch) {\n            return partialTeamNameMap[partialMatch];\n          }\n          // If no match, return the original team name\n          return team;\n        };\n\n        // Resolve full team names\n        const fullTeam1 = resolveTeamName(team1Normalized);\n        const fullTeam2 = resolveTeamName(team2Normalized);\n        console.log(`Full team names: ${fullTeam1} vs ${fullTeam2}`);\n\n        // Check if the teams are in the teamMatchups array\n        const matchup = teamMatchups.find(matchup => {\n          const [teamA, teamB] = matchup.split(' - ');\n          return teamA === fullTeam1 && teamB === fullTeam2 || teamA === fullTeam2 && teamB === fullTeam1;\n        });\n\n        // If a matchup is found, add the link and teams to the result\n        if (matchup) {\n          const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n          linksMap.set(matchup, youtubeLink);\n          console.log(`Link added for matchup: ${matchup}`);\n        }\n      } else {\n        console.log(`No teams found in title: ${title}`);\n      }\n    }\n  });\n\n  // Track whether an \"at\" match has already been found for a specific team matchup\n  const atMatchesFound = new Set();\n  jsonInput.items.forEach(item => {\n    const title = item.snippet.title;\n    const videoId = item.id.videoId;\n    if (highlightsPattern.test(title)) {\n      let team1;\n      let team2;\n\n      // Regex to extract teams in \"TEAM1 at TEAM2\" format\n      const atRegex = /([A-Za-z\\s]+)\\s+at\\s+([A-Za-z\\s]+)/i;\n      // Regex to extract teams in \"TEAM1 vs TEAM2\" format (with trailing words stripped)\n      const vsRegex = /([A-Za-z\\s]+)\\s+vs\\.?\\s+([A-Za-z\\s]+)(?:\\s+-\\s+[A-Za-z\\s]+)?/i;\n\n      // First, try to match \"TEAM1 at TEAM2\"\n      const atMatch = title.match(atRegex);\n      const vsMatch = title.match(vsRegex);\n      if (atMatch) {\n        [, team1, team2] = atMatch;\n      } else {\n        // If \"at\" format not found, try \"TEAM1 vs TEAM2\"\n        if (vsMatch) {\n          [, team1, team2] = vsMatch;\n        }\n      }\n      if (team1 && team2) {\n        // Normalize team names (trim and convert to uppercase for abbreviation lookup)\n        const team1Normalized = team1.trim().toUpperCase();\n        const team2Normalized = team2.trim().toUpperCase();\n\n        // Function to resolve full team name using both maps\n        const resolveTeamName = team => {\n          // Check if the team is an abbreviation (e.g., \"GSW\")\n          if (teamNameMap[team]) {\n            return teamNameMap[team];\n          }\n          // Check if the team is a partial name (e.g., \"HEAT\")\n          const partialMatch = Object.keys(partialTeamNameMap).find(key => team.includes(key));\n          if (partialMatch) {\n            return partialTeamNameMap[partialMatch];\n          }\n          // If no match, return the original team name\n          return team;\n        };\n\n        // Resolve full team names\n        const fullTeam1 = resolveTeamName(team1Normalized);\n        const fullTeam2 = resolveTeamName(team2Normalized);\n\n        // Create a matchup key using the resolved team names\n        const teams = [fullTeam1, fullTeam2].sort(); // Sort team names alphabetically\n        const matchupKey = `${teams[0]} vs ${teams[1]}`;\n        // Check if this matchup already has an \"at\" match\n        if (atMatch) {\n          if (!atMatchesFound.has(matchupKey)) {\n            atMatchesFound.add(matchupKey); // Mark this matchup as having an \"at\" match\n          } else {\n            // Skip this match because an \"at\" match has already been found for this matchup\n            return; // Skip to the next item\n          }\n        } else if (vsMatch) {\n          if (!atMatchesFound.has(matchupKey)) {} else {\n            // Skip this match because an \"at\" match has already been found for this matchup\n            return; // Skip to the next item\n          }\n        }\n\n        // Check if the teams are in the teamMatchups array\n        const matchup = teamMatchups.find(matchup => {\n          const [teamA, teamB] = matchup.split(' - ');\n          return teamA === fullTeam1 && teamB === fullTeam2 || teamA === fullTeam2 && teamB === fullTeam1;\n        });\n\n        // If a matchup is found, add the link and teams to the result\n        if (matchup) {\n          const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n          linksMap.set(matchup, youtubeLink);\n        }\n      } else {\n        console.log(`No teams found in title: ${title}`);\n      }\n    }\n  });\n\n  // Regular expression to match the pattern \"| FULL GAME HIGHLIGHTS | <current date>\"\n  // const pattern = new RegExp(`\\\\| FULL GAME HIGHLIGHTS \\\\| March 6, 2025`);\n\n  // const pattern = new RegExp(`\\\\| FULL GAME HIGHLIGHTS \\\\| ${currentDate}$`);\n\n  // Iterate through the items in the JSON input\n  // jsonInput.items.forEach((item: any) => {\n  //   const title = item.snippet.title;\n  //   const videoId = item.id.videoId;\n  //   console.log(`Title: ${title} - Video ID: ${videoId}`);\n\n  //   // Check if the title matches the pattern\n  //   if (pattern.test(title)) {\n  //       console.log(\"Match found!\");\n  //     // Extract the teams from the title (e.g., \"WARRIORS at NETS\")\n  //     const teamsInTitle = title.split(\" | \")[0];\n  //     console.log(`Teams in title: ${teamsInTitle}`);\n\n  //     // Split into home and away teams\n  //     const [awayTeamAbbr, homeTeamAbbr] = teamsInTitle.split(\" at \");\n\n  //     // Map abbreviated team names to full team names\n  //     const awayTeam = teamNameMap[awayTeamAbbr.toUpperCase()];\n  //     const homeTeam = teamNameMap[homeTeamAbbr.toUpperCase()];\n\n  //     // Check if the teams are in the teamMatchups array\n  //     const matchup = teamMatchups.find((matchup) => {\n  //       console.log(\"teamsMatchup: ${matchup} - awayTeam: ${awayTeam} - homeTeam: ${homeTeam} - title: ${title} - videoId: ${videoId} - match\");\n  //       const [team1, team2] = matchup.split(\" - \");\n  //       return (\n  //         (team1 === awayTeam && team2 === homeTeam) ||\n  //         (team1 === homeTeam && team2 === awayTeam)\n  //       );\n  //     });\n\n  //     // If a matchup is found, add the link and teams to the result\n  //     if (matchup) {\n  //       const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n  //       linksMap.set(matchup, youtubeLink);\n  //     }\n  //   }\n  // });\n\n  return linksMap;\n}\nexport const LoadGameData = async date => {\n  console.log(\"inside LoadGameData\");\n  try {\n    const todayDate = getNextDaysDateInPST();\n    // searchByKeyword();\n    //         const youtubeLinks = generateYouTubeLinks(jsonInput);\n    // console.log(youtubeLinks); // Output: Array of YouTube links\n    console.log(\"nextDayDate is \" + todayDate);\n    // await handleClientLoad();\n    const response = await fetchGames(date ? date : todayDate);\n    return response;\n    // const response = await axios.request(options);\n    // console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// Fetch NBA games data from API\n_c = LoadGameData;\nasync function fetchGames(date) {\n  try {\n    console.log(\"inside fetch games\");\n    console.log(\"date in fetchGames is \" + date);\n    const options = {\n      method: 'GET',\n      url: 'https://api-nba-v1.p.rapidapi.com/games',\n      params: {\n        date: date\n      },\n      // params: {date: '2025-03-07'},\n\n      headers: {\n        'x-rapidapi-key': '44698ba992mshb1ed670882daeb5p1e51e8jsn40da83b1be02',\n        'x-rapidapi-host': 'api-nba-v1.p.rapidapi.com'\n      }\n    };\n    console.log(\"options in fetchGames are \" + options);\n    const response = await axios.request(options);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching games for ${date}:`, error);\n    return null;\n  }\n}\n\n// Function to build games and check if they are close\nexport function buildGame(games) {\n  const builtGames = new Map();\n  const closeGameStatuses = [];\n  games.forEach(game => {\n    if (!checkNull(game)) {\n      const teamNames = getTeamNames(game);\n      const scores = getScores(game);\n      builtGames.set(teamNames, scores);\n\n      // Check if the game is close\n      const isClose = isCloseGame(game);\n      closeGameStatuses.push(isClose);\n    }\n  });\n  return {\n    builtGames,\n    closeGameStatuses\n  };\n}\n\n// Function to check if a single game is close\nexport function isCloseGame(game) {\n  return checkOT(game) || checkScore(getScores(game));\n}\n\n// Extract scores from game object\nfunction getScores(game) {\n  var _scores$visitors$poin, _scores$home$points;\n  const scores = game.scores;\n  const visitorScore = (_scores$visitors$poin = scores.visitors.points) !== null && _scores$visitors$poin !== void 0 ? _scores$visitors$poin : 0;\n  const homeScore = (_scores$home$points = scores.home.points) !== null && _scores$home$points !== void 0 ? _scores$home$points : 0;\n  return [visitorScore, homeScore];\n}\n\n// Check if scores are missing\nfunction checkNull(game) {\n  return game.scores.visitors.points === null || game.scores.home.points === null;\n}\n\n// Extract team names from game object\nfunction getTeamNames(game) {\n  return `${game.teams.visitors.name} - ${game.teams.home.name}`;\n}\n\n// Check if a game went to overtime\nfunction checkOT(game) {\n  console.log(\"inside checkOT\");\n  console.log(\"game.scores.home.linescore.length is \" + game.scores.home.linescore.length);\n  return game.scores.home.linescore.length > 4;\n}\n\n// Check if the final score difference is within 5 points\nfunction checkScore(score) {\n  return Math.abs(score[0] - score[1]) <= 5;\n}\n\n// // Write games data to file\n// async function writeGames(data: string) {\n//     try {\n//         await fs.writeFile(PATH, data);\n//     } catch (error) {\n//         console.error(\"Error writing file:\", error);\n//     }\n// }\n\n// Read games data from file\n// async function readGames(): Promise<string> {\n//     try {\n//         return await fs.readFile(PATH, \"utf-8\");\n//     } catch (error) {\n//         console.error(\"Error reading file:\", error);\n//         return \"\";\n//     }\n// }\n\nexport function splitTeamNames(teamString) {\n  const teams = teamString.trim().split(' - ');\n  if (teams.length === 2) {\n    return {\n      visitorTeam: teams[0],\n      // The first part is the visitor team\n      homeTeam: teams[1] // The second part is the home team\n    };\n  }\n  console.error(\"Invalid input format. Expected format: 'Visitor Team - Home Team'\");\n  return null;\n}\nexport const nbaTeamsAbbreviation = new Map([[\"Atlanta Hawks\", \"ATL\"], [\"Boston Celtics\", \"BOS\"], [\"Brooklyn Nets\", \"BKN\"], [\"Charlotte Hornets\", \"CHA\"], [\"Chicago Bulls\", \"CHI\"], [\"Cleveland Cavaliers\", \"CLE\"], [\"Dallas Mavericks\", \"DAL\"], [\"Denver Nuggets\", \"DEN\"], [\"Detroit Pistons\", \"DET\"], [\"Golden State Warriors\", \"GSW\"], [\"Houston Rockets\", \"HOU\"], [\"Indiana Pacers\", \"IND\"], [\"Los Angeles Clippers\", \"LAC\"], [\"Los Angeles Lakers\", \"LAL\"], [\"Memphis Grizzlies\", \"MEM\"], [\"Miami Heat\", \"MIA\"], [\"Milwaukee Bucks\", \"MIL\"], [\"Minnesota Timberwolves\", \"MIN\"], [\"New Orleans Pelicans\", \"NOP\"], [\"New York Knicks\", \"NYK\"], [\"Oklahoma City Thunder\", \"OKC\"], [\"Orlando Magic\", \"ORL\"], [\"Philadelphia 76ers\", \"PHI\"], [\"Phoenix Suns\", \"PHX\"], [\"Portland Trail Blazers\", \"POR\"], [\"Sacramento Kings\", \"SAC\"], [\"San Antonio Spurs\", \"SAS\"], [\"Toronto Raptors\", \"TOR\"], [\"Utah Jazz\", \"UTA\"], [\"Washington Wizards\", \"WAS\"]]);\nexport const visitorTeamsAbbreviation = new Map([[\"Atlanta Hawks\", \"ATL\"], [\"Boston Celtics\", \"BOS\"], [\"Brooklyn Nets\", \"BKN\"], [\"Charlotte Hornets\", \"CHA\"], [\"Chicago Bulls\", \"CHI\"], [\"Cleveland Cavaliers\", \"CLE\"], [\"Dallas Mavericks\", \"DAL\"], [\"Denver Nuggets\", \"DEN\"], [\"Detroit Pistons\", \"DET\"], [\"Golden State Warriors\", \"GSW\"], [\"Houston Rockets\", \"HOU\"], [\"Indiana Pacers\", \"IND\"], [\"Los Angeles Clippers\", \"LAC\"], [\"Los Angeles Lakers\", \"LAL\"], [\"Memphis Grizzlies\", \"MEM\"], [\"Miami Heat\", \"MIA\"], [\"Milwaukee Bucks\", \"MIL\"], [\"Minnesota Timberwolves\", \"MIN\"], [\"New Orleans Pelicans\", \"NOP\"], [\"New York Knicks\", \"NYK\"], [\"Oklahoma City Thunder\", \"OKC\"], [\"Orlando Magic\", \"ORL\"], [\"Philadelphia 76ers\", \"PHI\"], [\"Phoenix Suns\", \"PHX\"], [\"Portland Trail Blazers\", \"POR\"], [\"Sacramento Kings\", \"SAC\"], [\"San Antonio Spurs\", \"SAS\"], [\"Toronto Raptors\", \"TOR\"], [\"Utah Jazz\", \"UTA\"], [\"Washington Wizards\", \"WAS\"]]);\nvar _c;\n$RefreshReg$(_c, \"LoadGameData\");","map":{"version":3,"names":["axios","format","toZonedTime","addDays","getNextDaysDateInPST","now","Date","pstTime","nextDay","generateHighlightName","team1","team2","currentDate","formattedDate","toLocaleDateString","month","day","year","highlightName","toUpperCase","console","log","generateYouTubeLinks","jsonInput","teamMatchups","linksMap","Map","teamNameMap","partialTeamNameMap","HAWKS","CELTICS","NETS","HORNETS","BULLS","CAVALIERS","PISTONS","PACERS","HEAT","BUCKS","KNICKS","MAGIC","RAPTORS","WIZARDS","MAVERICKS","NUGGETS","WARRIORS","ROCKETS","CLIPPERS","LAKERS","GRIZZLIES","TIMBERWOLVES","PELICANS","THUNDER","SUNS","TRAILBLAZERS","BLAZERS","KINGS","SPURS","JAZZ","toLocaleString","timeZone","highlightsPattern","RegExp","items","forEach","item","title","snippet","videoId","id","test","atRegex","vsRegex","atMatch","match","vsMatch","team1Normalized","trim","team2Normalized","resolveTeamName","team","partialMatch","Object","keys","find","key","includes","fullTeam1","fullTeam2","matchup","teamA","teamB","split","youtubeLink","set","atMatchesFound","Set","teams","sort","matchupKey","has","add","LoadGameData","date","todayDate","response","fetchGames","error","_c","options","method","url","params","headers","request","data","buildGame","games","builtGames","closeGameStatuses","game","checkNull","teamNames","getTeamNames","scores","getScores","isClose","isCloseGame","push","checkOT","checkScore","_scores$visitors$poin","_scores$home$points","visitorScore","visitors","points","homeScore","home","name","linescore","length","score","Math","abs","splitTeamNames","teamString","visitorTeam","homeTeam","nbaTeamsAbbreviation","visitorTeamsAbbreviation","$RefreshReg$"],"sources":["/Users/alfredosantana/Desktop/workspace/react-app/close-game/src/api.ts"],"sourcesContent":["import axios from 'axios';\n\nimport { format, toZonedTime } from 'date-fns-tz';\nimport { addDays } from 'date-fns';\n\n\n// const PATH = \"/Users/alfredosantana/desktop/closegame/closegame/src/main/java/todaysGames/gamesData.txt\";\n\n// const scopes = \"youtube.googleapis.com\";\n// The Calendar entry to create\n//  var resource = {\n//     \"summary\": \"Appointment\",\n//     \"location\": \"Somewhere\",\n//     \"start\": {\n//       \"dateTime\": \"2011-12-16T10:00:00.000-07:00\"\n//     },\n//     \"end\": {\n//       \"dateTime\": \"2011-12-16T10:25:00.000-07:00\"\n//     }\n//   };\n\n/**\n* This function searches for videos related to the keyword 'dogs'. The video IDs and titles\n* of the search results are logged to Apps Script's log.\n*\n* Note that this sample limits the results to 25. To return more results, pass\n* additional parameters as documented here:\n*   https://developers.google.com/youtube/v3/docs/search/list\n*/\n// function searchByKeyword() {\n//     var results = YouTube.Search.list('id,snippet', {q: 'dogs', maxResults: 25});\n//     for(var i in results.items) {\n//       var item = results.items[i];\n//       Logger.log('[%s] Title: %s', item.id.videoId, item.snippet.title);\n//     }\n//   }\n\n// async function handleClientLoad() {\n//   gapi.load('client'a, initClient);\n// }\n\n\n// function signIn() {\n//   gapi.auth2.getAuthInstance().signIn();\n// }\n\n// function makeRequest() {\n//   gapi.client.request({\n//     'path': '/calendar/v3/calendars/primary/events',\n//     'method': 'POST',\n//     'body': resource\n//   }).then(function(resp) {\n//       console.log(resp);\n//       console.log(resp.result);\n//   //   writeResponse(resp.result);\n//   });\n// }\n\n\n\n// function getTodayDateFormatted(): string {\n//     const today = new Date();\n\n//     // Get year, month, and day\n//     const year = today.getFullYear();\n//     const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are zero-based\n//     const day = String(today.getDate()).padStart(2, '0');\n\n//     // Format as \"YYYY-MM-DD\"\n//     return `${year}-${month}-${day}`;\n//   }\n\n//   function getTodaysDateInEST(): string {\n//     const now = new Date(); // Current UTC time\n//     console.log(\"now is \" + now.toDateString);\n//     const estTime = toZonedTime(now, 'America/New_York'); // Convert to EST\n//     console.log(\"estTime is \" + estTime.toDateString);\n//     // Format the date as \"YYYY-MM-DD\" in EST\n//     return format(estTime, 'yyyy-MM-dd');\n//   }\n\nfunction getNextDaysDateInPST(): string {\n  const now = new Date(); // Current UTC time\n  const pstTime = toZonedTime(now, 'America/Los_Angeles'); // Convert to PST\n  const nextDay = addDays(pstTime, 1); // Add 1 day to the current PST date\n\n  // Format the date as \"YYYY-MM-DD\" in PST\n  return format(nextDay, 'yyyy-MM-dd');\n}\n\nfunction generateHighlightName(team1: string, team2: string): string {\n  // Get the current date\n  const currentDate = new Date();\n\n  // Format the date as \"Month Day, Year\"\n  const formattedDate = currentDate.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  // Generate the highlight name\n  const highlightName = `${team1.toUpperCase()} at ${team2.toUpperCase()} | FULL GAME HIGHLIGHTS | ${formattedDate}`;\n\n  return highlightName;\n}\n\n// Example usage:\nconst team1 = \"Warriors\";\nconst team2 = \"Nets\";\nconst highlightName = generateHighlightName(team1, team2);\nconsole.log(highlightName); // Output: WARRIORS at NETS | FULL GAME HIGHLIGHTS | March 6, 2025\n\n// function handleClientLoad() {\n//   // Load the API client and auth2 library\n//   gapi.load('client:auth2', initClient);\n// }\n\n// function initClient() {\n//   gapi.client.init({\n//       apiKey: YOUTUBE_API_KEY,\n//       // discoveryDocs: discoveryDocs,\n//       clientId: GOOGLE_CLIENT_ID,\n//       scope: scopes\n//   }).then(function () {\n//     console.log('Client library loaded and initialized.');\n//     // Listen for sign-in state changes.\n//     // gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n//     // Handle the initial sign-in state.\n//     // updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n\n//     // authorizeButton.onclick = handleAuthClick;\n//     // signoutButton.onclick = handleSignoutClick;\n//   });\n// }\n\nexport function generateYouTubeLinks(jsonInput: any, teamMatchups: string[]): Map<string, string> {\n  const linksMap = new Map<string, string>();\n  console.log(\"Team matchups: \", teamMatchups);\n  console.log(\"JSON input: \", jsonInput);\n\n  // Map of abbreviated team names to full team names\n  const teamNameMap: { [key: string]: string } = {\n    \"WARRIORS\": \"Golden State Warriors\",\n    \"NETS\": \"Brooklyn Nets\",\n    \"PACERS\": \"Indiana Pacers\",\n    \"HAWKS\": \"Atlanta Hawks\",\n    \"CELTICS\": \"Boston Celtics\",\n    \"HORNETS\": \"Charlotte Hornets\",\n    \"BULLS\": \"Chicago Bulls\",\n    \"CAVALIERS\": \"Cleveland Cavaliers\",\n    \"MAVERICKS\": \"Dallas Mavericks\",\n    \"NUGGETS\": \"Denver Nuggets\",\n    \"PISTONS\": \"Detroit Pistons\",\n    \"ROCKETS\": \"Houston Rockets\",\n    \"CLIPPERS\": \"LA Clippers\",\n    \"LAKERS\": \"Los Angeles Lakers\",\n    \"GRIZZLIES\": \"Memphis Grizzlies\",\n    \"HEAT\": \"Miami Heat\",\n    \"BUCKS\": \"Milwaukee Bucks\",\n    \"TIMBERWOLVES\": \"Minnesota Timberwolves\",\n    \"PELICANS\": \"New Orleans Pelicans\",\n    \"KNICKS\": \"New York Knicks\",\n    \"THUNDER\": \"Oklahoma City Thunder\",\n    \"MAGIC\": \"Orlando Magic\",\n    \"76ERS\": \"Philadelphia 76ers\",\n    \"SUNS\": \"Phoenix Suns\",\n    \"TRAIL BLAZERS\": \"Portland Trail Blazers\",\n    \"KINGS\": \"Sacramento Kings\",\n    \"SPURS\": \"San Antonio Spurs\",\n    \"RAPTORS\": \"Toronto Raptors\",\n    \"JAZZ\": \"Utah Jazz\",\n    \"WIZARDS\": \"Washington Wizards\"\n  };\n\n  const partialTeamNameMap: { [key: string]: string } = {\n    // Eastern Conference\n    HAWKS: 'Atlanta Hawks',\n    CELTICS: 'Boston Celtics',\n    NETS: 'Brooklyn Nets',\n    HORNETS: 'Charlotte Hornets',\n    BULLS: 'Chicago Bulls',\n    CAVALIERS: 'Cleveland Cavaliers',\n    PISTONS: 'Detroit Pistons',\n    PACERS: 'Indiana Pacers',\n    HEAT: 'Miami Heat',\n    BUCKS: 'Milwaukee Bucks',\n    KNICKS: 'New York Knicks',\n    MAGIC: 'Orlando Magic',\n    '76ERS': 'Philadelphia 76ers', // Note: Special characters like numbers are allowed\n    RAPTORS: 'Toronto Raptors',\n    WIZARDS: 'Washington Wizards',\n\n    // Western Conference\n    MAVERICKS: 'Dallas Mavericks',\n    NUGGETS: 'Denver Nuggets',\n    WARRIORS: 'Golden State Warriors',\n    ROCKETS: 'Houston Rockets',\n    CLIPPERS: 'LA Clippers',\n    LAKERS: 'Los Angeles Lakers',\n    GRIZZLIES: 'Memphis Grizzlies',\n    TIMBERWOLVES: 'Minnesota Timberwolves',\n    PELICANS: 'New Orleans Pelicans',\n    THUNDER: 'Oklahoma City Thunder',\n    SUNS: 'Phoenix Suns',\n    TRAILBLAZERS: 'Portland Trail Blazers', // Note: \"Trailblazers\" is a common alternative spelling\n    BLAZERS: 'Portland Trail Blazers', // Short form\n    KINGS: 'Sacramento Kings',\n    SPURS: 'San Antonio Spurs',\n    JAZZ: 'Utah Jazz',\n  };\n\n  // Get the current date in PST\n  const currentDate = new Date().toLocaleString('en-US', {\n    timeZone: 'America/Los_Angeles',\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  // Regex pattern to match \"highlights\" case-insensitively\n  const highlightsPattern = new RegExp('highlights', 'i');\n\n  // Map of team abbreviations to full team names\n  // const teamNameMap: { [key: string]: string } = {\n  //   GSW: 'Golden State Warriors',\n  //   BKN: 'Brooklyn Nets',\n  //   LAL: 'Los Angeles Lakers',\n  //   MEM: 'Memphis Grizzlies',\n  //   DAL: 'Dallas Mavericks',\n  //   // Add all other NBA teams here\n  // };\n\n  // Example team matchups (replace with your actual data)\n  // const teamMatchups = [\n  //   'Golden State Warriors - Brooklyn Nets',\n  //   'Los Angeles Lakers - Golden State Warriors',\n  //   'Memphis Grizzlies - Dallas Mavericks',\n  //   // Add all other matchups here\n  // ];\n\n  // Map to store the YouTube links for each matchup\n  // const linksMap = new Map<string, string>();\n\n  jsonInput.items.forEach((item: any) => {\n    const title = item.snippet.title;\n    const videoId = item.id.videoId;\n\n    // Check if the title contains \"highlights\" (case-insensitive)\n    if (highlightsPattern.test(title)) {\n\n      // Regex to extract teams in \"TEAM1 at TEAM2\" format\n      const atRegex = /([A-Za-z\\s]+)\\s+at\\s+([A-Za-z\\s]+)/i;\n      // Regex to extract teams in \"TEAM1 vs TEAM2\" format\n      const vsRegex = /([A-Za-z\\s]+)\\s+vs\\.?\\s+([A-Za-z\\s]+)(?:\\s+-\\s+[A-Za-z\\s]+)?/i;\n\n      let team1: string | undefined;\n      let team2: string | undefined;\n\n      // First, try to match \"TEAM1 at TEAM2\"\n      const atMatch = title.match(atRegex);\n      if (atMatch) {\n        [, team1, team2] = atMatch;\n      } else {\n        // If \"at\" format not found, try \"TEAM1 vs TEAM2\"\n        const vsMatch = title.match(vsRegex);\n        if (vsMatch) {\n          [, team1, team2] = vsMatch;\n\n        }\n      }\n\n      if (team1 && team2) {\n        // Normalize team names (trim and convert to uppercase for abbreviation lookup)\n        const team1Normalized = team1.trim().toUpperCase();\n        const team2Normalized = team2.trim().toUpperCase();\n\n        // Function to resolve full team name using both maps\n        const resolveTeamName = (team: string): string => {\n          // Check if the team is an abbreviation (e.g., \"GSW\")\n          if (teamNameMap[team]) {\n            return teamNameMap[team];\n          }\n          // Check if the team is a partial name (e.g., \"CLIPPERS\")\n          const partialMatch = Object.keys(partialTeamNameMap).find((key) =>\n            team.includes(key)\n          );\n          if (partialMatch) {\n            return partialTeamNameMap[partialMatch];\n          }\n          // If no match, return the original team name\n          return team;\n        };\n\n        // Resolve full team names\n        const fullTeam1 = resolveTeamName(team1Normalized);\n        const fullTeam2 = resolveTeamName(team2Normalized);\n\n        console.log(`Full team names: ${fullTeam1} vs ${fullTeam2}`);\n\n        // Check if the teams are in the teamMatchups array\n        const matchup = teamMatchups.find((matchup) => {\n          const [teamA, teamB] = matchup.split(' - ');\n          return (\n            (teamA === fullTeam1 && teamB === fullTeam2) ||\n            (teamA === fullTeam2 && teamB === fullTeam1)\n          );\n        });\n\n        // If a matchup is found, add the link and teams to the result\n        if (matchup) {\n          const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n          linksMap.set(matchup, youtubeLink);\n          console.log(`Link added for matchup: ${matchup}`);\n        }\n      } else {\n        console.log(`No teams found in title: ${title}`);\n      }\n    }\n  });\n\n  // Track whether an \"at\" match has already been found for a specific team matchup\n  const atMatchesFound = new Set<string>();\n\n  jsonInput.items.forEach((item: any) => {\n    const title = item.snippet.title;\n    const videoId = item.id.videoId;\n\n    if (highlightsPattern.test(title)) {\n\n      let team1: string | undefined;\n      let team2: string | undefined;\n\n      // Regex to extract teams in \"TEAM1 at TEAM2\" format\n      const atRegex = /([A-Za-z\\s]+)\\s+at\\s+([A-Za-z\\s]+)/i;\n      // Regex to extract teams in \"TEAM1 vs TEAM2\" format (with trailing words stripped)\n      const vsRegex = /([A-Za-z\\s]+)\\s+vs\\.?\\s+([A-Za-z\\s]+)(?:\\s+-\\s+[A-Za-z\\s]+)?/i;\n\n      // First, try to match \"TEAM1 at TEAM2\"\n      const atMatch = title.match(atRegex);\n      const vsMatch = title.match(vsRegex);\n\n      if (atMatch) {\n        [, team1, team2] = atMatch;\n      } else {\n        // If \"at\" format not found, try \"TEAM1 vs TEAM2\"\n        if (vsMatch) {\n          [, team1, team2] = vsMatch;\n        }\n      }\n\n      if (team1 && team2) {\n        // Normalize team names (trim and convert to uppercase for abbreviation lookup)\n        const team1Normalized = team1.trim().toUpperCase();\n        const team2Normalized = team2.trim().toUpperCase();\n\n        // Function to resolve full team name using both maps\n        const resolveTeamName = (team: string): string => {\n          // Check if the team is an abbreviation (e.g., \"GSW\")\n          if (teamNameMap[team]) {\n            return teamNameMap[team];\n          }\n          // Check if the team is a partial name (e.g., \"HEAT\")\n          const partialMatch = Object.keys(partialTeamNameMap).find((key) =>\n            team.includes(key)\n          );\n          if (partialMatch) {\n            return partialTeamNameMap[partialMatch];\n          }\n          // If no match, return the original team name\n          return team;\n        };\n\n        // Resolve full team names\n        const fullTeam1 = resolveTeamName(team1Normalized);\n        const fullTeam2 = resolveTeamName(team2Normalized);\n\n        // Create a matchup key using the resolved team names\n        const teams = [fullTeam1, fullTeam2].sort(); // Sort team names alphabetically\n        const matchupKey = `${teams[0]} vs ${teams[1]}`;\n        // Check if this matchup already has an \"at\" match\n        if (atMatch) {\n          if (!atMatchesFound.has(matchupKey)) {\n            atMatchesFound.add(matchupKey); // Mark this matchup as having an \"at\" match\n          } else {\n            // Skip this match because an \"at\" match has already been found for this matchup\n            return; // Skip to the next item\n          }\n        } else if (vsMatch) {\n          if (!atMatchesFound.has(matchupKey)) {\n          } else {\n            // Skip this match because an \"at\" match has already been found for this matchup\n            return; // Skip to the next item\n          }\n        }\n\n        // Check if the teams are in the teamMatchups array\n        const matchup = teamMatchups.find((matchup) => {\n          const [teamA, teamB] = matchup.split(' - ');\n          return (\n            (teamA === fullTeam1 && teamB === fullTeam2) ||\n            (teamA === fullTeam2 && teamB === fullTeam1)\n          );\n        });\n\n        // If a matchup is found, add the link and teams to the result\n        if (matchup) {\n          const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n          linksMap.set(matchup, youtubeLink);\n        }\n      } else {\n        console.log(`No teams found in title: ${title}`);\n      }\n    }\n  });\n\n  // Regular expression to match the pattern \"| FULL GAME HIGHLIGHTS | <current date>\"\n  // const pattern = new RegExp(`\\\\| FULL GAME HIGHLIGHTS \\\\| March 6, 2025`);\n\n  // const pattern = new RegExp(`\\\\| FULL GAME HIGHLIGHTS \\\\| ${currentDate}$`);\n\n  // Iterate through the items in the JSON input\n  // jsonInput.items.forEach((item: any) => {\n  //   const title = item.snippet.title;\n  //   const videoId = item.id.videoId;\n  //   console.log(`Title: ${title} - Video ID: ${videoId}`);\n\n  //   // Check if the title matches the pattern\n  //   if (pattern.test(title)) {\n  //       console.log(\"Match found!\");\n  //     // Extract the teams from the title (e.g., \"WARRIORS at NETS\")\n  //     const teamsInTitle = title.split(\" | \")[0];\n  //     console.log(`Teams in title: ${teamsInTitle}`);\n\n\n  //     // Split into home and away teams\n  //     const [awayTeamAbbr, homeTeamAbbr] = teamsInTitle.split(\" at \");\n\n  //     // Map abbreviated team names to full team names\n  //     const awayTeam = teamNameMap[awayTeamAbbr.toUpperCase()];\n  //     const homeTeam = teamNameMap[homeTeamAbbr.toUpperCase()];\n\n  //     // Check if the teams are in the teamMatchups array\n  //     const matchup = teamMatchups.find((matchup) => {\n  //       console.log(\"teamsMatchup: ${matchup} - awayTeam: ${awayTeam} - homeTeam: ${homeTeam} - title: ${title} - videoId: ${videoId} - match\");\n  //       const [team1, team2] = matchup.split(\" - \");\n  //       return (\n  //         (team1 === awayTeam && team2 === homeTeam) ||\n  //         (team1 === homeTeam && team2 === awayTeam)\n  //       );\n  //     });\n\n  //     // If a matchup is found, add the link and teams to the result\n  //     if (matchup) {\n  //       const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n  //       linksMap.set(matchup, youtubeLink);\n  //     }\n  //   }\n  // });\n\n  return linksMap;\n}\n\n\n\nexport const LoadGameData: any = async (date: string | null) => {\n  console.log(\"inside LoadGameData\");\n  try {\n    const todayDate = getNextDaysDateInPST();\n    // searchByKeyword();\n    //         const youtubeLinks = generateYouTubeLinks(jsonInput);\n    // console.log(youtubeLinks); // Output: Array of YouTube links\n    console.log(\"nextDayDate is \" + todayDate);\n    // await handleClientLoad();\n    const response = await fetchGames(date ? date : todayDate);\n    return response;\n    // const response = await axios.request(options);\n    // console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\n// Fetch NBA games data from API\nasync function fetchGames(date: string): Promise<any> {\n  try {\n    console.log(\"inside fetch games\");\n    console.log(\"date in fetchGames is \" + date);\n    const options = {\n      method: 'GET',\n      url: 'https://api-nba-v1.p.rapidapi.com/games',\n      params: { date: date },\n      // params: {date: '2025-03-07'},\n\n      headers: {\n        'x-rapidapi-key': '44698ba992mshb1ed670882daeb5p1e51e8jsn40da83b1be02',\n        'x-rapidapi-host': 'api-nba-v1.p.rapidapi.com'\n      }\n    };\n    console.log(\"options in fetchGames are \" + options);\n    const response = await axios.request(options);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching games for ${date}:`, error);\n    return null;\n  }\n}\n\n// Function to build games and check if they are close\nexport function buildGame(games: any[]): { builtGames: Map<string, number[]>; closeGameStatuses: boolean[] } {\n  const builtGames = new Map<string, number[]>();\n  const closeGameStatuses: boolean[] = [];\n\n  games.forEach((game) => {\n    if (!checkNull(game)) {\n      const teamNames = getTeamNames(game);\n      const scores = getScores(game);\n      builtGames.set(teamNames, scores);\n\n      // Check if the game is close\n      const isClose = isCloseGame(game);\n      closeGameStatuses.push(isClose);\n    }\n  });\n\n  return { builtGames, closeGameStatuses };\n}\n\n// Function to check if a single game is close\nexport function isCloseGame(game: any): boolean {\n  return checkOT(game) || checkScore(getScores(game));\n}\n\n// Extract scores from game object\nfunction getScores(game: any): number[] {\n  const scores = game.scores;\n  const visitorScore = scores.visitors.points ?? 0;\n  const homeScore = scores.home.points ?? 0;\n  return [visitorScore, homeScore];\n}\n\n// Check if scores are missing\nfunction checkNull(game: any): boolean {\n  return game.scores.visitors.points === null || game.scores.home.points === null;\n}\n\n// Extract team names from game object\nfunction getTeamNames(game: any): string {\n  return `${game.teams.visitors.name} - ${game.teams.home.name}`;\n}\n\n// Check if a game went to overtime\nfunction checkOT(game: any): boolean {\n  console.log(\"inside checkOT\");\n  console.log(\"game.scores.home.linescore.length is \" + game.scores.home.linescore.length);\n  return game.scores.home.linescore.length > 4;\n}\n\n// Check if the final score difference is within 5 points\nfunction checkScore(score: number[]): boolean {\n  return Math.abs(score[0] - score[1]) <= 5;\n}\n\n\n// // Write games data to file\n// async function writeGames(data: string) {\n//     try {\n//         await fs.writeFile(PATH, data);\n//     } catch (error) {\n//         console.error(\"Error writing file:\", error);\n//     }\n// }\n\n// Read games data from file\n// async function readGames(): Promise<string> {\n//     try {\n//         return await fs.readFile(PATH, \"utf-8\");\n//     } catch (error) {\n//         console.error(\"Error reading file:\", error);\n//         return \"\";\n//     }\n// }\n\n\nexport function splitTeamNames(teamString: string): { homeTeam: string, visitorTeam: string } | null {\n  const teams = teamString.trim().split(' - ');\n\n  if (teams.length === 2) {\n    return {\n      visitorTeam: teams[0],  // The first part is the visitor team\n      homeTeam: teams[1],     // The second part is the home team\n    };\n  }\n\n  console.error(\"Invalid input format. Expected format: 'Visitor Team - Home Team'\");\n  return null;\n}\n\nexport const nbaTeamsAbbreviation = new Map<string, string>([\n  [\"Atlanta Hawks\", \"ATL\"],\n  [\"Boston Celtics\", \"BOS\"],\n  [\"Brooklyn Nets\", \"BKN\"],\n  [\"Charlotte Hornets\", \"CHA\"],\n  [\"Chicago Bulls\", \"CHI\"],\n  [\"Cleveland Cavaliers\", \"CLE\"],\n  [\"Dallas Mavericks\", \"DAL\"],\n  [\"Denver Nuggets\", \"DEN\"],\n  [\"Detroit Pistons\", \"DET\"],\n  [\"Golden State Warriors\", \"GSW\"],\n  [\"Houston Rockets\", \"HOU\"],\n  [\"Indiana Pacers\", \"IND\"],\n  [\"Los Angeles Clippers\", \"LAC\"],\n  [\"Los Angeles Lakers\", \"LAL\"],\n  [\"Memphis Grizzlies\", \"MEM\"],\n  [\"Miami Heat\", \"MIA\"],\n  [\"Milwaukee Bucks\", \"MIL\"],\n  [\"Minnesota Timberwolves\", \"MIN\"],\n  [\"New Orleans Pelicans\", \"NOP\"],\n  [\"New York Knicks\", \"NYK\"],\n  [\"Oklahoma City Thunder\", \"OKC\"],\n  [\"Orlando Magic\", \"ORL\"],\n  [\"Philadelphia 76ers\", \"PHI\"],\n  [\"Phoenix Suns\", \"PHX\"],\n  [\"Portland Trail Blazers\", \"POR\"],\n  [\"Sacramento Kings\", \"SAC\"],\n  [\"San Antonio Spurs\", \"SAS\"],\n  [\"Toronto Raptors\", \"TOR\"],\n  [\"Utah Jazz\", \"UTA\"],\n  [\"Washington Wizards\", \"WAS\"]\n]);\n\nexport const visitorTeamsAbbreviation = new Map<string, string>([\n  [\"Atlanta Hawks\", \"ATL\"],\n  [\"Boston Celtics\", \"BOS\"],\n  [\"Brooklyn Nets\", \"BKN\"],\n  [\"Charlotte Hornets\", \"CHA\"],\n  [\"Chicago Bulls\", \"CHI\"],\n  [\"Cleveland Cavaliers\", \"CLE\"],\n  [\"Dallas Mavericks\", \"DAL\"],\n  [\"Denver Nuggets\", \"DEN\"],\n  [\"Detroit Pistons\", \"DET\"],\n  [\"Golden State Warriors\", \"GSW\"],\n  [\"Houston Rockets\", \"HOU\"],\n  [\"Indiana Pacers\", \"IND\"],\n  [\"Los Angeles Clippers\", \"LAC\"],\n  [\"Los Angeles Lakers\", \"LAL\"],\n  [\"Memphis Grizzlies\", \"MEM\"],\n  [\"Miami Heat\", \"MIA\"],\n  [\"Milwaukee Bucks\", \"MIL\"],\n  [\"Minnesota Timberwolves\", \"MIN\"],\n  [\"New Orleans Pelicans\", \"NOP\"],\n  [\"New York Knicks\", \"NYK\"],\n  [\"Oklahoma City Thunder\", \"OKC\"],\n  [\"Orlando Magic\", \"ORL\"],\n  [\"Philadelphia 76ers\", \"PHI\"],\n  [\"Phoenix Suns\", \"PHX\"],\n  [\"Portland Trail Blazers\", \"POR\"],\n  [\"Sacramento Kings\", \"SAC\"],\n  [\"San Antonio Spurs\", \"SAS\"],\n  [\"Toronto Raptors\", \"TOR\"],\n  [\"Utah Jazz\", \"UTA\"],\n  [\"Washington Wizards\", \"WAS\"]\n]);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}