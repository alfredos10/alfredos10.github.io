{"ast":null,"code":"import axios from'axios';import{format,toZonedTime}from'date-fns-tz';import{addDays}from'date-fns';// const PATH = \"/Users/alfredosantana/desktop/closegame/closegame/src/main/java/todaysGames/gamesData.txt\";\n// const scopes = \"youtube.googleapis.com\";\n// The Calendar entry to create\n//  var resource = {\n//     \"summary\": \"Appointment\",\n//     \"location\": \"Somewhere\",\n//     \"start\": {\n//       \"dateTime\": \"2011-12-16T10:00:00.000-07:00\"\n//     },\n//     \"end\": {\n//       \"dateTime\": \"2011-12-16T10:25:00.000-07:00\"\n//     }\n//   };\n/**\n* This function searches for videos related to the keyword 'dogs'. The video IDs and titles\n* of the search results are logged to Apps Script's log.\n*\n* Note that this sample limits the results to 25. To return more results, pass\n* additional parameters as documented here:\n*   https://developers.google.com/youtube/v3/docs/search/list\n*/// function searchByKeyword() {\n//     var results = YouTube.Search.list('id,snippet', {q: 'dogs', maxResults: 25});\n//     for(var i in results.items) {\n//       var item = results.items[i];\n//       Logger.log('[%s] Title: %s', item.id.videoId, item.snippet.title);\n//     }\n//   }\n// async function handleClientLoad() {\n//   gapi.load('client'a, initClient);\n// }\n// function signIn() {\n//   gapi.auth2.getAuthInstance().signIn();\n// }\n// function makeRequest() {\n//   gapi.client.request({\n//     'path': '/calendar/v3/calendars/primary/events',\n//     'method': 'POST',\n//     'body': resource\n//   }).then(function(resp) {\n//       console.log(resp);\n//       console.log(resp.result);\n//   //   writeResponse(resp.result);\n//   });\n// }\n// function getTodayDateFormatted(): string {\n//     const today = new Date();\n//     // Get year, month, and day\n//     const year = today.getFullYear();\n//     const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are zero-based\n//     const day = String(today.getDate()).padStart(2, '0');\n//     // Format as \"YYYY-MM-DD\"\n//     return `${year}-${month}-${day}`;\n//   }\n//   function getTodaysDateInEST(): string {\n//     const now = new Date(); // Current UTC time\n//     console.log(\"now is \" + now.toDateString);\n//     const estTime = toZonedTime(now, 'America/New_York'); // Convert to EST\n//     console.log(\"estTime is \" + estTime.toDateString);\n//     // Format the date as \"YYYY-MM-DD\" in EST\n//     return format(estTime, 'yyyy-MM-dd');\n//   }\nfunction getNextDaysDateInPST(){const now=new Date();// Current UTC time\nconst pstTime=toZonedTime(now,'America/Los_Angeles');// Convert to PST\nconst nextDay=addDays(pstTime,1);// Add 1 day to the current PST date\n// Format the date as \"YYYY-MM-DD\" in PST\nreturn format(nextDay,'yyyy-MM-dd');}function generateHighlightName(team1,team2){// Get the current date\nconst currentDate=new Date();// Format the date as \"Month Day, Year\"\nconst formattedDate=currentDate.toLocaleDateString('en-US',{month:'long',day:'numeric',year:'numeric'});// Generate the highlight name\nconst highlightName=`${team1.toUpperCase()} at ${team2.toUpperCase()} | FULL GAME HIGHLIGHTS | ${formattedDate}`;return highlightName;}// Example usage:\nconst team1=\"Warriors\";const team2=\"Nets\";const highlightName=generateHighlightName(team1,team2);console.log(highlightName);// Output: WARRIORS at NETS | FULL GAME HIGHLIGHTS | March 6, 2025\n// function handleClientLoad() {\n//   // Load the API client and auth2 library\n//   gapi.load('client:auth2', initClient);\n// }\n// function initClient() {\n//   gapi.client.init({\n//       apiKey: YOUTUBE_API_KEY,\n//       // discoveryDocs: discoveryDocs,\n//       clientId: GOOGLE_CLIENT_ID,\n//       scope: scopes\n//   }).then(function () {\n//     console.log('Client library loaded and initialized.');\n//     // Listen for sign-in state changes.\n//     // gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n//     // Handle the initial sign-in state.\n//     // updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n//     // authorizeButton.onclick = handleAuthClick;\n//     // signoutButton.onclick = handleSignoutClick;\n//   });\n// }\nexport function generateYouTubeLinks(jsonInput,teamMatchups){const linksMap=new Map();console.log(\"Team matchups: \",teamMatchups);console.log(\"JSON input: \",jsonInput);// Map of abbreviated team names to full team names\nconst teamNameMap={\"WARRIORS\":\"Golden State Warriors\",\"NETS\":\"Brooklyn Nets\",\"PACERS\":\"Indiana Pacers\",\"HAWKS\":\"Atlanta Hawks\",\"CELTICS\":\"Boston Celtics\",\"HORNETS\":\"Charlotte Hornets\",\"BULLS\":\"Chicago Bulls\",\"CAVALIERS\":\"Cleveland Cavaliers\",\"MAVERICKS\":\"Dallas Mavericks\",\"NUGGETS\":\"Denver Nuggets\",\"PISTONS\":\"Detroit Pistons\",\"ROCKETS\":\"Houston Rockets\",\"CLIPPERS\":\"Los Angeles Clippers\",\"LAKERS\":\"Los Angeles Lakers\",\"GRIZZLIES\":\"Memphis Grizzlies\",\"HEAT\":\"Miami Heat\",\"BUCKS\":\"Milwaukee Bucks\",\"TIMBERWOLVES\":\"Minnesota Timberwolves\",\"PELICANS\":\"New Orleans Pelicans\",\"KNICKS\":\"New York Knicks\",\"THUNDER\":\"Oklahoma City Thunder\",\"MAGIC\":\"Orlando Magic\",\"76ERS\":\"Philadelphia 76ers\",\"SUNS\":\"Phoenix Suns\",\"TRAIL BLAZERS\":\"Portland Trail Blazers\",\"KINGS\":\"Sacramento Kings\",\"SPURS\":\"San Antonio Spurs\",\"RAPTORS\":\"Toronto Raptors\",\"JAZZ\":\"Utah Jazz\",\"WIZARDS\":\"Washington Wizards\"};const partialTeamNameMap={// Eastern Conference\nHAWKS:'Atlanta Hawks',CELTICS:'Boston Celtics',NETS:'Brooklyn Nets',HORNETS:'Charlotte Hornets',BULLS:'Chicago Bulls',CAVALIERS:'Cleveland Cavaliers',PISTONS:'Detroit Pistons',PACERS:'Indiana Pacers',HEAT:'Miami Heat',BUCKS:'Milwaukee Bucks',KNICKS:'New York Knicks',MAGIC:'Orlando Magic','76ERS':'Philadelphia 76ers',// Note: Special characters like numbers are allowed\nRAPTORS:'Toronto Raptors',WIZARDS:'Washington Wizards',// Western Conference\nMAVERICKS:'Dallas Mavericks',NUGGETS:'Denver Nuggets',WARRIORS:'Golden State Warriors',ROCKETS:'Houston Rockets',CLIPPERS:'LA Clippers',LAKERS:'Los Angeles Lakers',GRIZZLIES:'Memphis Grizzlies',TIMBERWOLVES:'Minnesota Timberwolves',PELICANS:'New Orleans Pelicans',THUNDER:'Oklahoma City Thunder',SUNS:'Phoenix Suns',TRAILBLAZERS:'Portland Trail Blazers',// Note: \"Trailblazers\" is a common alternative spelling\nBLAZERS:'Portland Trail Blazers',// Short form\nKINGS:'Sacramento Kings',SPURS:'San Antonio Spurs',JAZZ:'Utah Jazz'};// Get the current date in PST\nconst currentDate=new Date().toLocaleString('en-US',{timeZone:'America/Los_Angeles',month:'long',day:'numeric',year:'numeric'});// Regex pattern to match \"highlights\" case-insensitively\nconst highlightsPattern=new RegExp('highlights','i');// Map of team abbreviations to full team names\n// const teamNameMap: { [key: string]: string } = {\n//   GSW: 'Golden State Warriors',\n//   BKN: 'Brooklyn Nets',\n//   LAL: 'Los Angeles Lakers',\n//   MEM: 'Memphis Grizzlies',\n//   DAL: 'Dallas Mavericks',\n//   // Add all other NBA teams here\n// };\n// Example team matchups (replace with your actual data)\n// const teamMatchups = [\n//   'Golden State Warriors - Brooklyn Nets',\n//   'Los Angeles Lakers - Golden State Warriors',\n//   'Memphis Grizzlies - Dallas Mavericks',\n//   // Add all other matchups here\n// ];\n// Map to store the YouTube links for each matchup\n// const linksMap = new Map<string, string>();\n// jsonInput.items.forEach((item: any) => {\n//   const title = item.snippet.title;\n//   const videoId = item.id.videoId;\n//   console.log(`Title: ${title} - Video ID: ${videoId}`);\n//   // Check if the title contains \"highlights\" (case-insensitive)\n//   if (highlightsPattern.test(title)) {\n//     console.log(\"Match found!\");\n//     // Regex to extract teams in \"TEAM1 at TEAM2\" format\n//     const atRegex = /([A-Za-z\\s]+)\\s+at\\s+([A-Za-z\\s]+)/i;\n//     // Regex to extract teams in \"TEAM1 vs TEAM2\" format\n//     const vsRegex = /([A-Za-z\\s]+)\\s+vs\\.?\\s+([A-Za-z\\s]+)(?:\\s+-\\s+[A-Za-z\\s]+)?/i;\n//     let team1: string | undefined;\n//     let team2: string | undefined;\n//     // First, try to match \"TEAM1 at TEAM2\"\n//     const atMatch = title.match(atRegex);\n//     if (atMatch) {\n//       [, team1, team2] = atMatch;\n//       console.log(`Teams found (at format): ${team1} at ${team2}`);\n//     } else {\n//       // If \"at\" format not found, try \"TEAM1 vs TEAM2\"\n//       const vsMatch = title.match(vsRegex);\n//       if (vsMatch) {\n//         [, team1, team2] = vsMatch;\n//         console.log(`Teams found (vs format): ${team1} vs ${team2}`);\n//       }\n//     }\n//     if (team1 && team2) {\n//       // Normalize team names (trim and convert to uppercase for abbreviation lookup)\n//       const team1Normalized = team1.trim().toUpperCase();\n//       const team2Normalized = team2.trim().toUpperCase();\n//       // Function to resolve full team name using both maps\n//       const resolveTeamName = (team: string): string => {\n//         // Check if the team is an abbreviation (e.g., \"GSW\")\n//         if (teamNameMap[team]) {\n//           return teamNameMap[team];\n//         }\n//         // Check if the team is a partial name (e.g., \"CLIPPERS\")\n//         const partialMatch = Object.keys(partialTeamNameMap).find((key) =>\n//           team.includes(key)\n//         );\n//         if (partialMatch) {\n//           console.log(`Partial match found: ${partialMatch}`);\n//           return partialTeamNameMap[partialMatch];\n//         }\n//         // If no match, return the original team name\n//         return team;\n//       };\n//       // Resolve full team names\n//       const fullTeam1 = resolveTeamName(team1Normalized);\n//       const fullTeam2 = resolveTeamName(team2Normalized);\n//       console.log(`Full team names: ${fullTeam1} vs ${fullTeam2}`);\n//       // Check if the teams are in the teamMatchups array\n//       const matchup = teamMatchups.find((matchup) => {\n//         const [teamA, teamB] = matchup.split(' - ');\n//         return (\n//           (teamA === fullTeam1 && teamB === fullTeam2) ||\n//           (teamA === fullTeam2 && teamB === fullTeam1)\n//         );\n//       });\n//       // If a matchup is found, add the link and teams to the result\n//       if (matchup) {\n//         const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n//         linksMap.set(matchup, youtubeLink);\n//         console.log(`Link added for matchup: ${matchup}`);\n//       } else {\n//         console.log(`No matchup found for ${fullTeam1} vs ${fullTeam2}`);\n//       }\n//     } else {\n//       console.log(`No teams found in title: ${title}`);\n//     }\n//   }\n// });\n// Track whether an \"at\" match has already been found for a specific team matchup\nconst atMatchesFound=new Set();jsonInput.items.forEach(item=>{const title=item.snippet.title;const videoId=item.id.videoId;console.log(`Title: ${title} - Video ID: ${videoId}`);let team1;let team2;// Regex to extract teams in \"TEAM1 at TEAM2\" format\nconst atRegex=/([A-Za-z\\s]+)\\s+at\\s+([A-Za-z\\s]+)/i;// Regex to extract teams in \"TEAM1 vs TEAM2\" format (with trailing words stripped)\nconst vsRegex=/([A-Za-z\\s]+)\\s+vs\\.?\\s+([A-Za-z\\s]+)(?:\\s+-\\s+[A-Za-z\\s]+)?/i;// First, try to match \"TEAM1 at TEAM2\"\nconst atMatch=title.match(atRegex);const vsMatch=title.match(vsRegex);if(atMatch){[,team1,team2]=atMatch;}else{// If \"at\" format not found, try \"TEAM1 vs TEAM2\"\nif(vsMatch){[,team1,team2]=vsMatch;}}if(team1&&team2){// Normalize team names (trim and convert to uppercase for abbreviation lookup)\nconst team1Normalized=team1.trim().toUpperCase();const team2Normalized=team2.trim().toUpperCase();// Function to resolve full team name using both maps\nconst resolveTeamName=team=>{// Check if the team is an abbreviation (e.g., \"GSW\")\nif(teamNameMap[team]){return teamNameMap[team];}// Check if the team is a partial name (e.g., \"HEAT\")\nconst partialMatch=Object.keys(partialTeamNameMap).find(key=>team.includes(key));if(partialMatch){return partialTeamNameMap[partialMatch];}// If no match, return the original team name\nreturn team;};// Resolve full team names\nconst fullTeam1=resolveTeamName(team1Normalized);const fullTeam2=resolveTeamName(team2Normalized);// Create a matchup key using the resolved team names\nconst teams=[fullTeam1,fullTeam2].sort();// Sort team names alphabetically\nconst matchupKey=`${teams[0]} vs ${teams[1]}`;// Check if this matchup already has an \"at\" match\nif(atMatch){if(!atMatchesFound.has(matchupKey)){atMatchesFound.add(matchupKey);// Mark this matchup as having an \"at\" match\nconsole.log(`Teams found (at format): ${fullTeam1} at ${fullTeam2}`);}else{// Skip this match because an \"at\" match has already been found for this matchup\nconsole.log(`Skipping \"at\" match for ${matchupKey} (already exists)`);return;// Skip to the next item\n}}else if(vsMatch){if(!atMatchesFound.has(matchupKey)){console.log(`Teams found (vs format): ${fullTeam1} vs ${fullTeam2}`);}else{// Skip this match because an \"at\" match has already been found for this matchup\nconsole.log(`Skipping \"vs\" match for ${matchupKey} (already has \"at\" match)`);return;// Skip to the next item\n}}// Check if the teams are in the teamMatchups array\nconst matchup=teamMatchups.find(matchup=>{const[teamA,teamB]=matchup.split(' - ');return teamA===fullTeam1&&teamB===fullTeam2||teamA===fullTeam2&&teamB===fullTeam1;});// If a matchup is found, add the link and teams to the result\nif(matchup){const youtubeLink=`https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;linksMap.set(matchup,youtubeLink);console.log(`Link added for matchup: ${matchup}`);}else{console.log(`No matchup found for ${fullTeam1} vs ${fullTeam2}`);}}else{console.log(`No teams found in title: ${title}`);}});// Output the final links map\nconsole.log('Final links map:',linksMap);// Regular expression to match the pattern \"| FULL GAME HIGHLIGHTS | <current date>\"\n// const pattern = new RegExp(`\\\\| FULL GAME HIGHLIGHTS \\\\| March 6, 2025`);\n// const pattern = new RegExp(`\\\\| FULL GAME HIGHLIGHTS \\\\| ${currentDate}$`);\n// Iterate through the items in the JSON input\n// jsonInput.items.forEach((item: any) => {\n//   const title = item.snippet.title;\n//   const videoId = item.id.videoId;\n//   console.log(`Title: ${title} - Video ID: ${videoId}`);\n//   // Check if the title matches the pattern\n//   if (pattern.test(title)) {\n//       console.log(\"Match found!\");\n//     // Extract the teams from the title (e.g., \"WARRIORS at NETS\")\n//     const teamsInTitle = title.split(\" | \")[0];\n//     console.log(`Teams in title: ${teamsInTitle}`);\n//     // Split into home and away teams\n//     const [awayTeamAbbr, homeTeamAbbr] = teamsInTitle.split(\" at \");\n//     // Map abbreviated team names to full team names\n//     const awayTeam = teamNameMap[awayTeamAbbr.toUpperCase()];\n//     const homeTeam = teamNameMap[homeTeamAbbr.toUpperCase()];\n//     // Check if the teams are in the teamMatchups array\n//     const matchup = teamMatchups.find((matchup) => {\n//       console.log(\"teamsMatchup: ${matchup} - awayTeam: ${awayTeam} - homeTeam: ${homeTeam} - title: ${title} - videoId: ${videoId} - match\");\n//       const [team1, team2] = matchup.split(\" - \");\n//       return (\n//         (team1 === awayTeam && team2 === homeTeam) ||\n//         (team1 === homeTeam && team2 === awayTeam)\n//       );\n//     });\n//     // If a matchup is found, add the link and teams to the result\n//     if (matchup) {\n//       const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n//       linksMap.set(matchup, youtubeLink);\n//     }\n//   }\n// });\nreturn linksMap;}export const LoadGameData=async date=>{console.log(\"inside LoadGameData\");try{const todayDate=getNextDaysDateInPST();// searchByKeyword();\n//         const youtubeLinks = generateYouTubeLinks(jsonInput);\n// console.log(youtubeLinks); // Output: Array of YouTube links\nconsole.log(\"nextDayDate is \"+todayDate);// await handleClientLoad();\nconsole.log(\"loaded client\");const response=await fetchGames(date?date:todayDate);return response;// const response = await axios.request(options);\n// console.log(response.data);\n}catch(error){console.error(error);}};// Fetch NBA games data from API\nasync function fetchGames(date){try{console.log(\"inside fetch games\");const options={method:'GET',url:'https://api-nba-v1.p.rapidapi.com/games',params:{date:date},// params: {date: '2025-03-07'},\nheaders:{'x-rapidapi-key':'44698ba992mshb1ed670882daeb5p1e51e8jsn40da83b1be02','x-rapidapi-host':'api-nba-v1.p.rapidapi.com'}};console.log(\"options in fetchGames are \"+options);const response=await axios.request(options);console.log(response.data);return response.data;}catch(error){console.error(`Error fetching games for ${date}:`,error);return null;}}// Function to build games and check if they are close\nexport function buildGame(games){const builtGames=new Map();const closeGameStatuses=[];games.forEach(game=>{if(!checkNull(game)){console.log(\"game is\");console.log(game);const teamNames=getTeamNames(game);const scores=getScores(game);builtGames.set(teamNames,scores);// Check if the game is close\nconst isClose=isCloseGame(game);closeGameStatuses.push(isClose);}});return{builtGames,closeGameStatuses};}// Function to check if a single game is close\nexport function isCloseGame(game){return checkOT(game)||checkScore(getScores(game));}// Extract scores from game object\nfunction getScores(game){var _scores$visitors$poin,_scores$home$points;const scores=game.scores;const visitorScore=(_scores$visitors$poin=scores.visitors.points)!==null&&_scores$visitors$poin!==void 0?_scores$visitors$poin:0;const homeScore=(_scores$home$points=scores.home.points)!==null&&_scores$home$points!==void 0?_scores$home$points:0;return[visitorScore,homeScore];}// Check if scores are missing\nfunction checkNull(game){return game.scores.visitors.points===null||game.scores.home.points===null;}// Extract team names from game object\nfunction getTeamNames(game){return`${game.teams.visitors.name} - ${game.teams.home.name}`;}// Check if a game went to overtime\nfunction checkOT(game){console.log(\"inside checkOT\");console.log(\"game.scores.home.linescore.length is \"+game.scores.home.linescore.length);return game.scores.home.linescore.length>4;}// Check if the final score difference is within 5 points\nfunction checkScore(score){return Math.abs(score[0]-score[1])<=5;}// // Write games data to file\n// async function writeGames(data: string) {\n//     try {\n//         await fs.writeFile(PATH, data);\n//     } catch (error) {\n//         console.error(\"Error writing file:\", error);\n//     }\n// }\n// Read games data from file\n// async function readGames(): Promise<string> {\n//     try {\n//         return await fs.readFile(PATH, \"utf-8\");\n//     } catch (error) {\n//         console.error(\"Error reading file:\", error);\n//         return \"\";\n//     }\n// }\nexport function splitTeamNames(teamString){const teams=teamString.trim().split(' - ');if(teams.length===2){return{visitorTeam:teams[0],// The first part is the visitor team\nhomeTeam:teams[1]// The second part is the home team\n};}console.error(\"Invalid input format. Expected format: 'Visitor Team - Home Team'\");return null;}export const nbaTeamsAbbreviation=new Map([[\"Atlanta Hawks\",\"ATL\"],[\"Boston Celtics\",\"BOS\"],[\"Brooklyn Nets\",\"BKN\"],[\"Charlotte Hornets\",\"CHA\"],[\"Chicago Bulls\",\"CHI\"],[\"Cleveland Cavaliers\",\"CLE\"],[\"Dallas Mavericks\",\"DAL\"],[\"Denver Nuggets\",\"DEN\"],[\"Detroit Pistons\",\"DET\"],[\"Golden State Warriors\",\"GSW\"],[\"Houston Rockets\",\"HOU\"],[\"Indiana Pacers\",\"IND\"],[\"Los Angeles Clippers\",\"LAC\"],[\"Los Angeles Lakers\",\"LAL\"],[\"Memphis Grizzlies\",\"MEM\"],[\"Miami Heat\",\"MIA\"],[\"Milwaukee Bucks\",\"MIL\"],[\"Minnesota Timberwolves\",\"MIN\"],[\"New Orleans Pelicans\",\"NOP\"],[\"New York Knicks\",\"NYK\"],[\"Oklahoma City Thunder\",\"OKC\"],[\"Orlando Magic\",\"ORL\"],[\"Philadelphia 76ers\",\"PHI\"],[\"Phoenix Suns\",\"PHX\"],[\"Portland Trail Blazers\",\"POR\"],[\"Sacramento Kings\",\"SAC\"],[\"San Antonio Spurs\",\"SAS\"],[\"Toronto Raptors\",\"TOR\"],[\"Utah Jazz\",\"UTA\"],[\"Washington Wizards\",\"WAS\"]]);export const visitorTeamsAbbreviation=new Map([[\"Atlanta Hawks\",\"ATL\"],[\"Boston Celtics\",\"BOS\"],[\"Brooklyn Nets\",\"BKN\"],[\"Charlotte Hornets\",\"CHA\"],[\"Chicago Bulls\",\"CHI\"],[\"Cleveland Cavaliers\",\"CLE\"],[\"Dallas Mavericks\",\"DAL\"],[\"Denver Nuggets\",\"DEN\"],[\"Detroit Pistons\",\"DET\"],[\"Golden State Warriors\",\"GSW\"],[\"Houston Rockets\",\"HOU\"],[\"Indiana Pacers\",\"IND\"],[\"Los Angeles Clippers\",\"LAC\"],[\"Los Angeles Lakers\",\"LAL\"],[\"Memphis Grizzlies\",\"MEM\"],[\"Miami Heat\",\"MIA\"],[\"Milwaukee Bucks\",\"MIL\"],[\"Minnesota Timberwolves\",\"MIN\"],[\"New Orleans Pelicans\",\"NOP\"],[\"New York Knicks\",\"NYK\"],[\"Oklahoma City Thunder\",\"OKC\"],[\"Orlando Magic\",\"ORL\"],[\"Philadelphia 76ers\",\"PHI\"],[\"Phoenix Suns\",\"PHX\"],[\"Portland Trail Blazers\",\"POR\"],[\"Sacramento Kings\",\"SAC\"],[\"San Antonio Spurs\",\"SAS\"],[\"Toronto Raptors\",\"TOR\"],[\"Utah Jazz\",\"UTA\"],[\"Washington Wizards\",\"WAS\"]]);","map":{"version":3,"names":["axios","format","toZonedTime","addDays","getNextDaysDateInPST","now","Date","pstTime","nextDay","generateHighlightName","team1","team2","currentDate","formattedDate","toLocaleDateString","month","day","year","highlightName","toUpperCase","console","log","generateYouTubeLinks","jsonInput","teamMatchups","linksMap","Map","teamNameMap","partialTeamNameMap","HAWKS","CELTICS","NETS","HORNETS","BULLS","CAVALIERS","PISTONS","PACERS","HEAT","BUCKS","KNICKS","MAGIC","RAPTORS","WIZARDS","MAVERICKS","NUGGETS","WARRIORS","ROCKETS","CLIPPERS","LAKERS","GRIZZLIES","TIMBERWOLVES","PELICANS","THUNDER","SUNS","TRAILBLAZERS","BLAZERS","KINGS","SPURS","JAZZ","toLocaleString","timeZone","highlightsPattern","RegExp","atMatchesFound","Set","items","forEach","item","title","snippet","videoId","id","atRegex","vsRegex","atMatch","match","vsMatch","team1Normalized","trim","team2Normalized","resolveTeamName","team","partialMatch","Object","keys","find","key","includes","fullTeam1","fullTeam2","teams","sort","matchupKey","has","add","matchup","teamA","teamB","split","youtubeLink","set","LoadGameData","date","todayDate","response","fetchGames","error","options","method","url","params","headers","request","data","buildGame","games","builtGames","closeGameStatuses","game","checkNull","teamNames","getTeamNames","scores","getScores","isClose","isCloseGame","push","checkOT","checkScore","_scores$visitors$poin","_scores$home$points","visitorScore","visitors","points","homeScore","home","name","linescore","length","score","Math","abs","splitTeamNames","teamString","visitorTeam","homeTeam","nbaTeamsAbbreviation","visitorTeamsAbbreviation"],"sources":["/Users/alfredosantana/Desktop/workspace/react-app/close-game/src/api.ts"],"sourcesContent":["import axios from 'axios';\n\nimport { format, toZonedTime } from 'date-fns-tz';\nimport { addDays } from 'date-fns';\n\n\n// const PATH = \"/Users/alfredosantana/desktop/closegame/closegame/src/main/java/todaysGames/gamesData.txt\";\n\n// const scopes = \"youtube.googleapis.com\";\n// The Calendar entry to create\n//  var resource = {\n//     \"summary\": \"Appointment\",\n//     \"location\": \"Somewhere\",\n//     \"start\": {\n//       \"dateTime\": \"2011-12-16T10:00:00.000-07:00\"\n//     },\n//     \"end\": {\n//       \"dateTime\": \"2011-12-16T10:25:00.000-07:00\"\n//     }\n//   };\n\n/**\n* This function searches for videos related to the keyword 'dogs'. The video IDs and titles\n* of the search results are logged to Apps Script's log.\n*\n* Note that this sample limits the results to 25. To return more results, pass\n* additional parameters as documented here:\n*   https://developers.google.com/youtube/v3/docs/search/list\n*/\n// function searchByKeyword() {\n//     var results = YouTube.Search.list('id,snippet', {q: 'dogs', maxResults: 25});\n//     for(var i in results.items) {\n//       var item = results.items[i];\n//       Logger.log('[%s] Title: %s', item.id.videoId, item.snippet.title);\n//     }\n//   }\n\n// async function handleClientLoad() {\n//   gapi.load('client'a, initClient);\n// }\n\n\n// function signIn() {\n//   gapi.auth2.getAuthInstance().signIn();\n// }\n\n// function makeRequest() {\n//   gapi.client.request({\n//     'path': '/calendar/v3/calendars/primary/events',\n//     'method': 'POST',\n//     'body': resource\n//   }).then(function(resp) {\n//       console.log(resp);\n//       console.log(resp.result);\n//   //   writeResponse(resp.result);\n//   });\n// }\n\n\n\n// function getTodayDateFormatted(): string {\n//     const today = new Date();\n\n//     // Get year, month, and day\n//     const year = today.getFullYear();\n//     const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are zero-based\n//     const day = String(today.getDate()).padStart(2, '0');\n\n//     // Format as \"YYYY-MM-DD\"\n//     return `${year}-${month}-${day}`;\n//   }\n\n//   function getTodaysDateInEST(): string {\n//     const now = new Date(); // Current UTC time\n//     console.log(\"now is \" + now.toDateString);\n//     const estTime = toZonedTime(now, 'America/New_York'); // Convert to EST\n//     console.log(\"estTime is \" + estTime.toDateString);\n//     // Format the date as \"YYYY-MM-DD\" in EST\n//     return format(estTime, 'yyyy-MM-dd');\n//   }\n\nfunction getNextDaysDateInPST(): string {\n  const now = new Date(); // Current UTC time\n  const pstTime = toZonedTime(now, 'America/Los_Angeles'); // Convert to PST\n  const nextDay = addDays(pstTime, 1); // Add 1 day to the current PST date\n\n  // Format the date as \"YYYY-MM-DD\" in PST\n  return format(nextDay, 'yyyy-MM-dd');\n}\n\nfunction generateHighlightName(team1: string, team2: string): string {\n  // Get the current date\n  const currentDate = new Date();\n\n  // Format the date as \"Month Day, Year\"\n  const formattedDate = currentDate.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  // Generate the highlight name\n  const highlightName = `${team1.toUpperCase()} at ${team2.toUpperCase()} | FULL GAME HIGHLIGHTS | ${formattedDate}`;\n\n  return highlightName;\n}\n\n// Example usage:\nconst team1 = \"Warriors\";\nconst team2 = \"Nets\";\nconst highlightName = generateHighlightName(team1, team2);\nconsole.log(highlightName); // Output: WARRIORS at NETS | FULL GAME HIGHLIGHTS | March 6, 2025\n\n// function handleClientLoad() {\n//   // Load the API client and auth2 library\n//   gapi.load('client:auth2', initClient);\n// }\n\n// function initClient() {\n//   gapi.client.init({\n//       apiKey: YOUTUBE_API_KEY,\n//       // discoveryDocs: discoveryDocs,\n//       clientId: GOOGLE_CLIENT_ID,\n//       scope: scopes\n//   }).then(function () {\n//     console.log('Client library loaded and initialized.');\n//     // Listen for sign-in state changes.\n//     // gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n//     // Handle the initial sign-in state.\n//     // updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n\n//     // authorizeButton.onclick = handleAuthClick;\n//     // signoutButton.onclick = handleSignoutClick;\n//   });\n// }\n\nexport function generateYouTubeLinks(jsonInput: any, teamMatchups: string[]): Map<string, string> {\n  const linksMap = new Map<string, string>();\n  console.log(\"Team matchups: \", teamMatchups);\n  console.log(\"JSON input: \", jsonInput);\n\n  // Map of abbreviated team names to full team names\n  const teamNameMap: { [key: string]: string } = {\n    \"WARRIORS\": \"Golden State Warriors\",\n    \"NETS\": \"Brooklyn Nets\",\n    \"PACERS\": \"Indiana Pacers\",\n    \"HAWKS\": \"Atlanta Hawks\",\n    \"CELTICS\": \"Boston Celtics\",\n    \"HORNETS\": \"Charlotte Hornets\",\n    \"BULLS\": \"Chicago Bulls\",\n    \"CAVALIERS\": \"Cleveland Cavaliers\",\n    \"MAVERICKS\": \"Dallas Mavericks\",\n    \"NUGGETS\": \"Denver Nuggets\",\n    \"PISTONS\": \"Detroit Pistons\",\n    \"ROCKETS\": \"Houston Rockets\",\n    \"CLIPPERS\": \"Los Angeles Clippers\",\n    \"LAKERS\": \"Los Angeles Lakers\",\n    \"GRIZZLIES\": \"Memphis Grizzlies\",\n    \"HEAT\": \"Miami Heat\",\n    \"BUCKS\": \"Milwaukee Bucks\",\n    \"TIMBERWOLVES\": \"Minnesota Timberwolves\",\n    \"PELICANS\": \"New Orleans Pelicans\",\n    \"KNICKS\": \"New York Knicks\",\n    \"THUNDER\": \"Oklahoma City Thunder\",\n    \"MAGIC\": \"Orlando Magic\",\n    \"76ERS\": \"Philadelphia 76ers\",\n    \"SUNS\": \"Phoenix Suns\",\n    \"TRAIL BLAZERS\": \"Portland Trail Blazers\",\n    \"KINGS\": \"Sacramento Kings\",\n    \"SPURS\": \"San Antonio Spurs\",\n    \"RAPTORS\": \"Toronto Raptors\",\n    \"JAZZ\": \"Utah Jazz\",\n    \"WIZARDS\": \"Washington Wizards\"\n  };\n\n  const partialTeamNameMap: { [key: string]: string } = {\n    // Eastern Conference\n    HAWKS: 'Atlanta Hawks',\n    CELTICS: 'Boston Celtics',\n    NETS: 'Brooklyn Nets',\n    HORNETS: 'Charlotte Hornets',\n    BULLS: 'Chicago Bulls',\n    CAVALIERS: 'Cleveland Cavaliers',\n    PISTONS: 'Detroit Pistons',\n    PACERS: 'Indiana Pacers',\n    HEAT: 'Miami Heat',\n    BUCKS: 'Milwaukee Bucks',\n    KNICKS: 'New York Knicks',\n    MAGIC: 'Orlando Magic',\n    '76ERS': 'Philadelphia 76ers', // Note: Special characters like numbers are allowed\n    RAPTORS: 'Toronto Raptors',\n    WIZARDS: 'Washington Wizards',\n\n    // Western Conference\n    MAVERICKS: 'Dallas Mavericks',\n    NUGGETS: 'Denver Nuggets',\n    WARRIORS: 'Golden State Warriors',\n    ROCKETS: 'Houston Rockets',\n    CLIPPERS: 'LA Clippers',\n    LAKERS: 'Los Angeles Lakers',\n    GRIZZLIES: 'Memphis Grizzlies',\n    TIMBERWOLVES: 'Minnesota Timberwolves',\n    PELICANS: 'New Orleans Pelicans',\n    THUNDER: 'Oklahoma City Thunder',\n    SUNS: 'Phoenix Suns',\n    TRAILBLAZERS: 'Portland Trail Blazers', // Note: \"Trailblazers\" is a common alternative spelling\n    BLAZERS: 'Portland Trail Blazers', // Short form\n    KINGS: 'Sacramento Kings',\n    SPURS: 'San Antonio Spurs',\n    JAZZ: 'Utah Jazz',\n  };\n\n  // Get the current date in PST\n  const currentDate = new Date().toLocaleString('en-US', {\n    timeZone: 'America/Los_Angeles',\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  // Regex pattern to match \"highlights\" case-insensitively\n  const highlightsPattern = new RegExp('highlights', 'i');\n\n  // Map of team abbreviations to full team names\n  // const teamNameMap: { [key: string]: string } = {\n  //   GSW: 'Golden State Warriors',\n  //   BKN: 'Brooklyn Nets',\n  //   LAL: 'Los Angeles Lakers',\n  //   MEM: 'Memphis Grizzlies',\n  //   DAL: 'Dallas Mavericks',\n  //   // Add all other NBA teams here\n  // };\n\n  // Example team matchups (replace with your actual data)\n  // const teamMatchups = [\n  //   'Golden State Warriors - Brooklyn Nets',\n  //   'Los Angeles Lakers - Golden State Warriors',\n  //   'Memphis Grizzlies - Dallas Mavericks',\n  //   // Add all other matchups here\n  // ];\n\n  // Map to store the YouTube links for each matchup\n  // const linksMap = new Map<string, string>();\n\n  // jsonInput.items.forEach((item: any) => {\n  //   const title = item.snippet.title;\n  //   const videoId = item.id.videoId;\n  //   console.log(`Title: ${title} - Video ID: ${videoId}`);\n\n  //   // Check if the title contains \"highlights\" (case-insensitive)\n  //   if (highlightsPattern.test(title)) {\n  //     console.log(\"Match found!\");\n\n  //     // Regex to extract teams in \"TEAM1 at TEAM2\" format\n  //     const atRegex = /([A-Za-z\\s]+)\\s+at\\s+([A-Za-z\\s]+)/i;\n  //     // Regex to extract teams in \"TEAM1 vs TEAM2\" format\n  //     const vsRegex = /([A-Za-z\\s]+)\\s+vs\\.?\\s+([A-Za-z\\s]+)(?:\\s+-\\s+[A-Za-z\\s]+)?/i;\n\n  //     let team1: string | undefined;\n  //     let team2: string | undefined;\n\n  //     // First, try to match \"TEAM1 at TEAM2\"\n  //     const atMatch = title.match(atRegex);\n  //     if (atMatch) {\n  //       [, team1, team2] = atMatch;\n  //       console.log(`Teams found (at format): ${team1} at ${team2}`);\n  //     } else {\n  //       // If \"at\" format not found, try \"TEAM1 vs TEAM2\"\n  //       const vsMatch = title.match(vsRegex);\n  //       if (vsMatch) {\n  //         [, team1, team2] = vsMatch;\n\n  //         console.log(`Teams found (vs format): ${team1} vs ${team2}`);\n  //       }\n  //     }\n\n  //     if (team1 && team2) {\n  //       // Normalize team names (trim and convert to uppercase for abbreviation lookup)\n  //       const team1Normalized = team1.trim().toUpperCase();\n  //       const team2Normalized = team2.trim().toUpperCase();\n\n  //       // Function to resolve full team name using both maps\n  //       const resolveTeamName = (team: string): string => {\n  //         // Check if the team is an abbreviation (e.g., \"GSW\")\n  //         if (teamNameMap[team]) {\n  //           return teamNameMap[team];\n  //         }\n  //         // Check if the team is a partial name (e.g., \"CLIPPERS\")\n  //         const partialMatch = Object.keys(partialTeamNameMap).find((key) =>\n  //           team.includes(key)\n  //         );\n  //         if (partialMatch) {\n  //           console.log(`Partial match found: ${partialMatch}`);\n  //           return partialTeamNameMap[partialMatch];\n  //         }\n  //         // If no match, return the original team name\n  //         return team;\n  //       };\n\n  //       // Resolve full team names\n  //       const fullTeam1 = resolveTeamName(team1Normalized);\n  //       const fullTeam2 = resolveTeamName(team2Normalized);\n\n  //       console.log(`Full team names: ${fullTeam1} vs ${fullTeam2}`);\n\n  //       // Check if the teams are in the teamMatchups array\n  //       const matchup = teamMatchups.find((matchup) => {\n  //         const [teamA, teamB] = matchup.split(' - ');\n  //         return (\n  //           (teamA === fullTeam1 && teamB === fullTeam2) ||\n  //           (teamA === fullTeam2 && teamB === fullTeam1)\n  //         );\n  //       });\n\n  //       // If a matchup is found, add the link and teams to the result\n  //       if (matchup) {\n  //         const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n  //         linksMap.set(matchup, youtubeLink);\n  //         console.log(`Link added for matchup: ${matchup}`);\n  //       } else {\n  //         console.log(`No matchup found for ${fullTeam1} vs ${fullTeam2}`);\n  //       }\n  //     } else {\n  //       console.log(`No teams found in title: ${title}`);\n  //     }\n  //   }\n  // });\n\n  // Track whether an \"at\" match has already been found for a specific team matchup\n  const atMatchesFound = new Set<string>();\n\n  jsonInput.items.forEach((item: any) => {\n    const title = item.snippet.title;\n    const videoId = item.id.videoId;\n    console.log(`Title: ${title} - Video ID: ${videoId}`);\n\n    let team1: string | undefined;\n    let team2: string | undefined;\n\n    // Regex to extract teams in \"TEAM1 at TEAM2\" format\n    const atRegex = /([A-Za-z\\s]+)\\s+at\\s+([A-Za-z\\s]+)/i;\n    // Regex to extract teams in \"TEAM1 vs TEAM2\" format (with trailing words stripped)\n    const vsRegex = /([A-Za-z\\s]+)\\s+vs\\.?\\s+([A-Za-z\\s]+)(?:\\s+-\\s+[A-Za-z\\s]+)?/i;\n\n    // First, try to match \"TEAM1 at TEAM2\"\n    const atMatch = title.match(atRegex);\n    const vsMatch = title.match(vsRegex);\n\n    if (atMatch) {\n      [, team1, team2] = atMatch;\n    } else {\n      // If \"at\" format not found, try \"TEAM1 vs TEAM2\"\n      if (vsMatch) {\n        [, team1, team2] = vsMatch;\n      }\n    }\n\n    if (team1 && team2) {\n      // Normalize team names (trim and convert to uppercase for abbreviation lookup)\n      const team1Normalized = team1.trim().toUpperCase();\n      const team2Normalized = team2.trim().toUpperCase();\n\n      // Function to resolve full team name using both maps\n      const resolveTeamName = (team: string): string => {\n        // Check if the team is an abbreviation (e.g., \"GSW\")\n        if (teamNameMap[team]) {\n          return teamNameMap[team];\n        }\n        // Check if the team is a partial name (e.g., \"HEAT\")\n        const partialMatch = Object.keys(partialTeamNameMap).find((key) =>\n          team.includes(key)\n        );\n        if (partialMatch) {\n          return partialTeamNameMap[partialMatch];\n        }\n        // If no match, return the original team name\n        return team;\n      };\n\n      // Resolve full team names\n      const fullTeam1 = resolveTeamName(team1Normalized);\n      const fullTeam2 = resolveTeamName(team2Normalized);\n\n      // Create a matchup key using the resolved team names\n      const teams = [fullTeam1, fullTeam2].sort(); // Sort team names alphabetically\n      const matchupKey = `${teams[0]} vs ${teams[1]}`;\n      // Check if this matchup already has an \"at\" match\n      if (atMatch) {\n        if (!atMatchesFound.has(matchupKey)) {\n          atMatchesFound.add(matchupKey); // Mark this matchup as having an \"at\" match\n          console.log(`Teams found (at format): ${fullTeam1} at ${fullTeam2}`);\n        } else {\n          // Skip this match because an \"at\" match has already been found for this matchup\n          console.log(`Skipping \"at\" match for ${matchupKey} (already exists)`);\n          return; // Skip to the next item\n        }\n      } else if (vsMatch) {\n        if (!atMatchesFound.has(matchupKey)) {\n          console.log(`Teams found (vs format): ${fullTeam1} vs ${fullTeam2}`);\n        } else {\n          // Skip this match because an \"at\" match has already been found for this matchup\n          console.log(`Skipping \"vs\" match for ${matchupKey} (already has \"at\" match)`);\n          return; // Skip to the next item\n        }\n      }\n\n      // Check if the teams are in the teamMatchups array\n      const matchup = teamMatchups.find((matchup) => {\n        const [teamA, teamB] = matchup.split(' - ');\n        return (\n          (teamA === fullTeam1 && teamB === fullTeam2) ||\n          (teamA === fullTeam2 && teamB === fullTeam1)\n        );\n      });\n\n      // If a matchup is found, add the link and teams to the result\n      if (matchup) {\n        const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n        linksMap.set(matchup, youtubeLink);\n        console.log(`Link added for matchup: ${matchup}`);\n      } else {\n        console.log(`No matchup found for ${fullTeam1} vs ${fullTeam2}`);\n      }\n    } else {\n      console.log(`No teams found in title: ${title}`);\n    }\n  });\n\n  // Output the final links map\n  console.log('Final links map:', linksMap);\n\n  // Regular expression to match the pattern \"| FULL GAME HIGHLIGHTS | <current date>\"\n  // const pattern = new RegExp(`\\\\| FULL GAME HIGHLIGHTS \\\\| March 6, 2025`);\n\n  // const pattern = new RegExp(`\\\\| FULL GAME HIGHLIGHTS \\\\| ${currentDate}$`);\n\n  // Iterate through the items in the JSON input\n  // jsonInput.items.forEach((item: any) => {\n  //   const title = item.snippet.title;\n  //   const videoId = item.id.videoId;\n  //   console.log(`Title: ${title} - Video ID: ${videoId}`);\n\n  //   // Check if the title matches the pattern\n  //   if (pattern.test(title)) {\n  //       console.log(\"Match found!\");\n  //     // Extract the teams from the title (e.g., \"WARRIORS at NETS\")\n  //     const teamsInTitle = title.split(\" | \")[0];\n  //     console.log(`Teams in title: ${teamsInTitle}`);\n\n\n  //     // Split into home and away teams\n  //     const [awayTeamAbbr, homeTeamAbbr] = teamsInTitle.split(\" at \");\n\n  //     // Map abbreviated team names to full team names\n  //     const awayTeam = teamNameMap[awayTeamAbbr.toUpperCase()];\n  //     const homeTeam = teamNameMap[homeTeamAbbr.toUpperCase()];\n\n  //     // Check if the teams are in the teamMatchups array\n  //     const matchup = teamMatchups.find((matchup) => {\n  //       console.log(\"teamsMatchup: ${matchup} - awayTeam: ${awayTeam} - homeTeam: ${homeTeam} - title: ${title} - videoId: ${videoId} - match\");\n  //       const [team1, team2] = matchup.split(\" - \");\n  //       return (\n  //         (team1 === awayTeam && team2 === homeTeam) ||\n  //         (team1 === homeTeam && team2 === awayTeam)\n  //       );\n  //     });\n\n  //     // If a matchup is found, add the link and teams to the result\n  //     if (matchup) {\n  //       const youtubeLink = `https://www.youtube.com/watch?v=${videoId}&ab_channel=NBA`;\n  //       linksMap.set(matchup, youtubeLink);\n  //     }\n  //   }\n  // });\n\n  return linksMap;\n}\n\n\n\nexport const LoadGameData: any = async (date: string | null) => {\n  console.log(\"inside LoadGameData\");\n  try {\n    const todayDate = getNextDaysDateInPST();\n    // searchByKeyword();\n    //         const youtubeLinks = generateYouTubeLinks(jsonInput);\n    // console.log(youtubeLinks); // Output: Array of YouTube links\n    console.log(\"nextDayDate is \" + todayDate);\n    // await handleClientLoad();\n    console.log(\"loaded client\");\n    const response = await fetchGames(date ? date : todayDate);\n    return response;\n    // const response = await axios.request(options);\n    // console.log(response.data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\n// Fetch NBA games data from API\nasync function fetchGames(date: string): Promise<any> {\n  try {\n    console.log(\"inside fetch games\");\n    const options = {\n      method: 'GET',\n      url: 'https://api-nba-v1.p.rapidapi.com/games',\n      params: { date: date },\n      // params: {date: '2025-03-07'},\n\n      headers: {\n        'x-rapidapi-key': '44698ba992mshb1ed670882daeb5p1e51e8jsn40da83b1be02',\n        'x-rapidapi-host': 'api-nba-v1.p.rapidapi.com'\n      }\n    };\n    console.log(\"options in fetchGames are \" + options);\n    const response = await axios.request(options);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching games for ${date}:`, error);\n    return null;\n  }\n}\n\n// Function to build games and check if they are close\nexport function buildGame(games: any[]): { builtGames: Map<string, number[]>; closeGameStatuses: boolean[] } {\n  const builtGames = new Map<string, number[]>();\n  const closeGameStatuses: boolean[] = [];\n\n  games.forEach((game) => {\n    if (!checkNull(game)) {\n      console.log(\"game is\");\n      console.log(game);\n      const teamNames = getTeamNames(game);\n      const scores = getScores(game);\n      builtGames.set(teamNames, scores);\n\n      // Check if the game is close\n      const isClose = isCloseGame(game);\n      closeGameStatuses.push(isClose);\n    }\n  });\n\n  return { builtGames, closeGameStatuses };\n}\n\n// Function to check if a single game is close\nexport function isCloseGame(game: any): boolean {\n  return checkOT(game) || checkScore(getScores(game));\n}\n\n// Extract scores from game object\nfunction getScores(game: any): number[] {\n  const scores = game.scores;\n  const visitorScore = scores.visitors.points ?? 0;\n  const homeScore = scores.home.points ?? 0;\n  return [visitorScore, homeScore];\n}\n\n// Check if scores are missing\nfunction checkNull(game: any): boolean {\n  return game.scores.visitors.points === null || game.scores.home.points === null;\n}\n\n// Extract team names from game object\nfunction getTeamNames(game: any): string {\n  return `${game.teams.visitors.name} - ${game.teams.home.name}`;\n}\n\n// Check if a game went to overtime\nfunction checkOT(game: any): boolean {\n  console.log(\"inside checkOT\");\n  console.log(\"game.scores.home.linescore.length is \" + game.scores.home.linescore.length);\n  return game.scores.home.linescore.length > 4;\n}\n\n// Check if the final score difference is within 5 points\nfunction checkScore(score: number[]): boolean {\n  return Math.abs(score[0] - score[1]) <= 5;\n}\n\n\n// // Write games data to file\n// async function writeGames(data: string) {\n//     try {\n//         await fs.writeFile(PATH, data);\n//     } catch (error) {\n//         console.error(\"Error writing file:\", error);\n//     }\n// }\n\n// Read games data from file\n// async function readGames(): Promise<string> {\n//     try {\n//         return await fs.readFile(PATH, \"utf-8\");\n//     } catch (error) {\n//         console.error(\"Error reading file:\", error);\n//         return \"\";\n//     }\n// }\n\n\nexport function splitTeamNames(teamString: string): { homeTeam: string, visitorTeam: string } | null {\n  const teams = teamString.trim().split(' - ');\n\n  if (teams.length === 2) {\n    return {\n      visitorTeam: teams[0],  // The first part is the visitor team\n      homeTeam: teams[1],     // The second part is the home team\n    };\n  }\n\n  console.error(\"Invalid input format. Expected format: 'Visitor Team - Home Team'\");\n  return null;\n}\n\nexport const nbaTeamsAbbreviation = new Map<string, string>([\n  [\"Atlanta Hawks\", \"ATL\"],\n  [\"Boston Celtics\", \"BOS\"],\n  [\"Brooklyn Nets\", \"BKN\"],\n  [\"Charlotte Hornets\", \"CHA\"],\n  [\"Chicago Bulls\", \"CHI\"],\n  [\"Cleveland Cavaliers\", \"CLE\"],\n  [\"Dallas Mavericks\", \"DAL\"],\n  [\"Denver Nuggets\", \"DEN\"],\n  [\"Detroit Pistons\", \"DET\"],\n  [\"Golden State Warriors\", \"GSW\"],\n  [\"Houston Rockets\", \"HOU\"],\n  [\"Indiana Pacers\", \"IND\"],\n  [\"Los Angeles Clippers\", \"LAC\"],\n  [\"Los Angeles Lakers\", \"LAL\"],\n  [\"Memphis Grizzlies\", \"MEM\"],\n  [\"Miami Heat\", \"MIA\"],\n  [\"Milwaukee Bucks\", \"MIL\"],\n  [\"Minnesota Timberwolves\", \"MIN\"],\n  [\"New Orleans Pelicans\", \"NOP\"],\n  [\"New York Knicks\", \"NYK\"],\n  [\"Oklahoma City Thunder\", \"OKC\"],\n  [\"Orlando Magic\", \"ORL\"],\n  [\"Philadelphia 76ers\", \"PHI\"],\n  [\"Phoenix Suns\", \"PHX\"],\n  [\"Portland Trail Blazers\", \"POR\"],\n  [\"Sacramento Kings\", \"SAC\"],\n  [\"San Antonio Spurs\", \"SAS\"],\n  [\"Toronto Raptors\", \"TOR\"],\n  [\"Utah Jazz\", \"UTA\"],\n  [\"Washington Wizards\", \"WAS\"]\n]);\n\nexport const visitorTeamsAbbreviation = new Map<string, string>([\n  [\"Atlanta Hawks\", \"ATL\"],\n  [\"Boston Celtics\", \"BOS\"],\n  [\"Brooklyn Nets\", \"BKN\"],\n  [\"Charlotte Hornets\", \"CHA\"],\n  [\"Chicago Bulls\", \"CHI\"],\n  [\"Cleveland Cavaliers\", \"CLE\"],\n  [\"Dallas Mavericks\", \"DAL\"],\n  [\"Denver Nuggets\", \"DEN\"],\n  [\"Detroit Pistons\", \"DET\"],\n  [\"Golden State Warriors\", \"GSW\"],\n  [\"Houston Rockets\", \"HOU\"],\n  [\"Indiana Pacers\", \"IND\"],\n  [\"Los Angeles Clippers\", \"LAC\"],\n  [\"Los Angeles Lakers\", \"LAL\"],\n  [\"Memphis Grizzlies\", \"MEM\"],\n  [\"Miami Heat\", \"MIA\"],\n  [\"Milwaukee Bucks\", \"MIL\"],\n  [\"Minnesota Timberwolves\", \"MIN\"],\n  [\"New Orleans Pelicans\", \"NOP\"],\n  [\"New York Knicks\", \"NYK\"],\n  [\"Oklahoma City Thunder\", \"OKC\"],\n  [\"Orlando Magic\", \"ORL\"],\n  [\"Philadelphia 76ers\", \"PHI\"],\n  [\"Phoenix Suns\", \"PHX\"],\n  [\"Portland Trail Blazers\", \"POR\"],\n  [\"Sacramento Kings\", \"SAC\"],\n  [\"San Antonio Spurs\", \"SAS\"],\n  [\"Toronto Raptors\", \"TOR\"],\n  [\"Utah Jazz\", \"UTA\"],\n  [\"Washington Wizards\", \"WAS\"]\n]);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}